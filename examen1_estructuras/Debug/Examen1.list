
Examen1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ac  080051ac  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b4  080051b4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080051bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000005c  08005218  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08005218  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efe0  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dad  00000000  00000000  0002f0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00030e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b31  00000000  00000000  00031ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a5a  00000000  00000000  000327d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b38  00000000  00000000  00059233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f234a  00000000  00000000  00069d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000414c  00000000  00000000  0015c0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00160204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800510c 	.word	0x0800510c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800510c 	.word	0x0800510c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fbd6 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f84a 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f9ba 	bl	80008f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f988 	bl	8000890 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000580:	f000 f896 	bl	80006b0 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000584:	f000 f90c 	bl	80007a0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim16);// Iniciamos el contador del Timer 16 en modo Interrupción
 8000588:	4819      	ldr	r0, [pc, #100]	; (80005f0 <main+0x84>)
 800058a:	f002 fa89 	bl	8002aa0 <HAL_TIM_Base_Start_IT>


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//  Iniciamos el PWM en el Timmer 3 en el canal 1 (PA6)
 800058e:	2100      	movs	r1, #0
 8000590:	4818      	ldr	r0, [pc, #96]	; (80005f4 <main+0x88>)
 8000592:	f002 fb57 	bl	8002c44 <HAL_TIM_PWM_Start>

  maxDuty = htim3.Instance->ARR;// Definimos la variable maxDuty igual al registro ARR
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <main+0x88>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <main+0x8c>)
 80005a0:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

 for (duty = 0; duty < maxDuty; ++duty) {
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <main+0x90>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	801a      	strh	r2, [r3, #0]
 80005a8:	e01a      	b.n	80005e0 <main+0x74>
htim3.Instance->CCR1 = duty; // El ancho del  pulso del canal 0 (PA6) va a ir incrementando hasta llegar al ARR
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <main+0x90>)
 80005ac:	881a      	ldrh	r2, [r3, #0]
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <main+0x88>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	635a      	str	r2, [r3, #52]	; 0x34
       sprintf(Buffer, "duty: %d\r\n", duty);//
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <main+0x90>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4911      	ldr	r1, [pc, #68]	; (8000600 <main+0x94>)
 80005bc:	4811      	ldr	r0, [pc, #68]	; (8000604 <main+0x98>)
 80005be:	f004 f901 	bl	80047c4 <siprintf>
       HAL_UART_Transmit(&huart2, (uint8_t*)Buffer, 8, 20);
 80005c2:	2314      	movs	r3, #20
 80005c4:	2208      	movs	r2, #8
 80005c6:	490f      	ldr	r1, [pc, #60]	; (8000604 <main+0x98>)
 80005c8:	480f      	ldr	r0, [pc, #60]	; (8000608 <main+0x9c>)
 80005ca:	f003 fba3 	bl	8003d14 <HAL_UART_Transmit>
HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fc22 	bl	8000e18 <HAL_Delay>
 for (duty = 0; duty < maxDuty; ++duty) {
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <main+0x90>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <main+0x90>)
 80005de:	801a      	strh	r2, [r3, #0]
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <main+0x90>)
 80005e2:	881a      	ldrh	r2, [r3, #0]
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <main+0x8c>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d3de      	bcc.n	80005aa <main+0x3e>
 80005ec:	e7d9      	b.n	80005a2 <main+0x36>
 80005ee:	bf00      	nop
 80005f0:	200000c4 	.word	0x200000c4
 80005f4:	20000078 	.word	0x20000078
 80005f8:	2000019a 	.word	0x2000019a
 80005fc:	20000198 	.word	0x20000198
 8000600:	08005124 	.word	0x08005124
 8000604:	2000019c 	.word	0x2000019c
 8000608:	20000110 	.word	0x20000110

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	; 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 f8f2 	bl	8004804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f000 fecb 	bl	80013cc <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f9be 	bl	80009bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065a:	230a      	movs	r3, #10
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ff02 	bl	8001478 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 f99f 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f001 faca 	bl	8001c30 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a2:	f000 f98b 	bl	80009bc <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3758      	adds	r7, #88	; 0x58
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08e      	sub	sp, #56	; 0x38
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
 80006de:	615a      	str	r2, [r3, #20]
 80006e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_TIM3_Init+0xe8>)
 80006e4:	4a2d      	ldr	r2, [pc, #180]	; (800079c <MX_TIM3_Init+0xec>)
 80006e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 80006e8:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <MX_TIM3_Init+0xe8>)
 80006ea:	f240 321f 	movw	r2, #799	; 0x31f
 80006ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_TIM3_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_TIM3_Init+0xe8>)
 80006f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_TIM3_Init+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <MX_TIM3_Init+0xe8>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800070a:	4823      	ldr	r0, [pc, #140]	; (8000798 <MX_TIM3_Init+0xe8>)
 800070c:	f002 f970 	bl	80029f0 <HAL_TIM_Base_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000716:	f000 f951 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000724:	4619      	mov	r1, r3
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <MX_TIM3_Init+0xe8>)
 8000728:	f002 fca6 	bl	8003078 <HAL_TIM_ConfigClockSource>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000732:	f000 f943 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000736:	4818      	ldr	r0, [pc, #96]	; (8000798 <MX_TIM3_Init+0xe8>)
 8000738:	f002 fa22 	bl	8002b80 <HAL_TIM_PWM_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000742:	f000 f93b 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4810      	ldr	r0, [pc, #64]	; (8000798 <MX_TIM3_Init+0xe8>)
 8000756:	f003 f989 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000760:	f000 f92c 	bl	80009bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000764:	2360      	movs	r3, #96	; 0x60
 8000766:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	4619      	mov	r1, r3
 800077a:	4807      	ldr	r0, [pc, #28]	; (8000798 <MX_TIM3_Init+0xe8>)
 800077c:	f002 fb68 	bl	8002e50 <HAL_TIM_PWM_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000786:	f000 f919 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800078a:	4803      	ldr	r0, [pc, #12]	; (8000798 <MX_TIM3_Init+0xe8>)
 800078c:	f000 f974 	bl	8000a78 <HAL_TIM_MspPostInit>

}
 8000790:	bf00      	nop
 8000792:	3738      	adds	r7, #56	; 0x38
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000078 	.word	0x20000078
 800079c:	40000400 	.word	0x40000400

080007a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b092      	sub	sp, #72	; 0x48
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	222c      	movs	r2, #44	; 0x2c
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 f81f 	bl	8004804 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <MX_TIM16_Init+0xe8>)
 80007c8:	4a30      	ldr	r2, [pc, #192]	; (800088c <MX_TIM16_Init+0xec>)
 80007ca:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 800-1;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <MX_TIM16_Init+0xe8>)
 80007ce:	f240 321f 	movw	r2, #799	; 0x31f
 80007d2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <MX_TIM16_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_TIM16_Init+0xe8>)
 80007dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007e0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_TIM16_Init+0xe8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <MX_TIM16_Init+0xe8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_TIM16_Init+0xe8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007f4:	4824      	ldr	r0, [pc, #144]	; (8000888 <MX_TIM16_Init+0xe8>)
 80007f6:	f002 f8fb 	bl	80029f0 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8000800:	f000 f8dc 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000804:	4820      	ldr	r0, [pc, #128]	; (8000888 <MX_TIM16_Init+0xe8>)
 8000806:	f002 f9bb 	bl	8002b80 <HAL_TIM_PWM_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8000810:	f000 f8d4 	bl	80009bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <MX_TIM16_Init+0xe8>)
 800083a:	f002 fb09 	bl	8002e50 <HAL_TIM_PWM_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000844:	f000 f8ba 	bl	80009bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800085c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000860:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_TIM16_Init+0xe8>)
 800086c:	f003 f986 	bl	8003b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000876:	f000 f8a1 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800087a:	4803      	ldr	r0, [pc, #12]	; (8000888 <MX_TIM16_Init+0xe8>)
 800087c:	f000 f8fc 	bl	8000a78 <HAL_TIM_MspPostInit>

}
 8000880:	bf00      	nop
 8000882:	3748      	adds	r7, #72	; 0x48
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000c4 	.word	0x200000c4
 800088c:	40014400 	.word	0x40014400

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_USART2_UART_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008d4:	f003 f9d0 	bl	8003c78 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f86d 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000110 	.word	0x20000110
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a2a      	ldr	r2, [pc, #168]	; (80009b4 <MX_GPIO_Init+0xc4>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_GPIO_Init+0xc4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <MX_GPIO_Init+0xc4>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_GPIO_Init+0xc4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f000 fd07 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000978:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <MX_GPIO_Init+0xc8>)
 800098a:	f000 fb4f 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800098e:	2320      	movs	r3, #32
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f000 fb40 	bl	800102c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000800 	.word	0x48000800

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6613      	str	r3, [r2, #96]	; 0x60
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6593      	str	r3, [r2, #88]	; 0x58
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x44>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <HAL_TIM_Base_MspInit+0x5c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d10c      	bne.n	8000a3c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_TIM_Base_MspInit+0x60>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <HAL_TIM_Base_MspInit+0x60>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_TIM_Base_MspInit+0x60>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a3a:	e010      	b.n	8000a5e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <HAL_TIM_Base_MspInit+0x64>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d10b      	bne.n	8000a5e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_TIM_Base_MspInit+0x60>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <HAL_TIM_Base_MspInit+0x60>)
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	6613      	str	r3, [r2, #96]	; 0x60
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <HAL_TIM_Base_MspInit+0x60>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40000400 	.word	0x40000400
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40014400 	.word	0x40014400

08000a78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <HAL_TIM_MspPostInit+0xa8>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d11c      	bne.n	8000ad4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <HAL_TIM_MspPostInit+0xac>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <HAL_TIM_MspPostInit+0xac>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <HAL_TIM_MspPostInit+0xac>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ab2:	2340      	movs	r3, #64	; 0x40
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4816      	ldr	r0, [pc, #88]	; (8000b28 <HAL_TIM_MspPostInit+0xb0>)
 8000ace:	f000 faad 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000ad2:	e021      	b.n	8000b18 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM16)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <HAL_TIM_MspPostInit+0xb4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d11c      	bne.n	8000b18 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_TIM_MspPostInit+0xac>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_TIM_MspPostInit+0xac>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_TIM_MspPostInit+0xac>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000af6:	2340      	movs	r3, #64	; 0x40
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000b06:	230e      	movs	r3, #14
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f000 fa8a 	bl	800102c <HAL_GPIO_Init>
}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40000400 	.word	0x40000400
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000800 	.word	0x48000800
 8000b2c:	40014400 	.word	0x40014400

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0ac      	sub	sp, #176	; 0xb0
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2288      	movs	r2, #136	; 0x88
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fe57 	bl	8004804 <memset>
  if(huart->Instance==USART2)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <HAL_UART_MspInit+0xb0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d13b      	bne.n	8000bd8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 fa83 	bl	8002078 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b78:	f7ff ff20 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_UART_MspInit+0xb4>)
 8000b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b80:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <HAL_UART_MspInit+0xb4>)
 8000b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b86:	6593      	str	r3, [r2, #88]	; 0x58
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_UART_MspInit+0xb4>)
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_UART_MspInit+0xb4>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <HAL_UART_MspInit+0xb4>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_UART_MspInit+0xb4>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bac:	230c      	movs	r3, #12
 8000bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f000 fa2a 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	37b0      	adds	r7, #176	; 0xb0
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40004400 	.word	0x40004400
 8000be4:	40021000 	.word	0x40021000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f8d0 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f003 fdd2 	bl	8004814 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20018000 	.word	0x20018000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	200001ac 	.word	0x200001ac
 8000ca4:	20000300 	.word	0x20000300

08000ca8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd0:	f7ff ffea 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd6:	490d      	ldr	r1, [pc, #52]	; (8000d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <LoopForever+0xe>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cec:	4c0a      	ldr	r4, [pc, #40]	; (8000d18 <LoopForever+0x16>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f003 fd91 	bl	8004820 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfe:	f7ff fc35 	bl	800056c <main>

08000d02 <LoopForever>:

LoopForever:
    b LoopForever
 8000d02:	e7fe      	b.n	8000d02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d10:	080051bc 	.word	0x080051bc
  ldr r2, =_sbss
 8000d14:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d18:	200002fc 	.word	0x200002fc

08000d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC1_2_IRQHandler>
	...

08000d20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_Init+0x3c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_Init+0x3c>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d36:	2003      	movs	r0, #3
 8000d38:	f000 f944 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 f80f 	bl	8000d60 <HAL_InitTick>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	e001      	b.n	8000d52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4e:	f7ff fe3b 	bl	80009c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d52:	79fb      	ldrb	r3, [r7, #7]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40022000 	.word	0x40022000

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_InitTick+0x6c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d023      	beq.n	8000dbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_InitTick+0x70>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_InitTick+0x6c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f941 	bl	8001012 <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10f      	bne.n	8000db6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d809      	bhi.n	8000db0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f919 	bl	8000fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_InitTick+0x74>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e007      	b.n	8000dc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e004      	b.n	8000dc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e001      	b.n	8000dc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	200001b0 	.word	0x200001b0

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200001b0 	.word	0x200001b0

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff ffee 	bl	8000e00 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_Delay+0x44>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffde 	bl	8000e00 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff47 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff5c 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffb0 	bl	8000f80 <SysTick_Config>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	e17f      	b.n	800133c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8171 	beq.w	8001336 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d005      	beq.n	800106c <HAL_GPIO_Init+0x40>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d130      	bne.n	80010ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a2:	2201      	movs	r2, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	f003 0201 	and.w	r2, r3, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d118      	bne.n	800110c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010e0:	2201      	movs	r2, #1
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	08db      	lsrs	r3, r3, #3
 80010f6:	f003 0201 	and.w	r2, r3, #1
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b03      	cmp	r3, #3
 8001116:	d017      	beq.n	8001148 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d123      	bne.n	800119c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	6939      	ldr	r1, [r7, #16]
 8001198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80ac 	beq.w	8001336 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b5f      	ldr	r3, [pc, #380]	; (800135c <HAL_GPIO_Init+0x330>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	4a5e      	ldr	r2, [pc, #376]	; (800135c <HAL_GPIO_Init+0x330>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ea:	4b5c      	ldr	r3, [pc, #368]	; (800135c <HAL_GPIO_Init+0x330>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f6:	4a5a      	ldr	r2, [pc, #360]	; (8001360 <HAL_GPIO_Init+0x334>)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x242>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4f      	ldr	r2, [pc, #316]	; (8001364 <HAL_GPIO_Init+0x338>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x23e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <HAL_GPIO_Init+0x33c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x23a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4d      	ldr	r2, [pc, #308]	; (800136c <HAL_GPIO_Init+0x340>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x236>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <HAL_GPIO_Init+0x344>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x232>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4b      	ldr	r2, [pc, #300]	; (8001374 <HAL_GPIO_Init+0x348>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x22e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4a      	ldr	r2, [pc, #296]	; (8001378 <HAL_GPIO_Init+0x34c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x22a>
 8001252:	2306      	movs	r3, #6
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x244>
 8001256:	2307      	movs	r3, #7
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x244>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x244>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x244>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x244>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x244>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x244>
 800126e:	2300      	movs	r3, #0
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001280:	4937      	ldr	r1, [pc, #220]	; (8001360 <HAL_GPIO_Init+0x334>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_GPIO_Init+0x350>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012b2:	4a32      	ldr	r2, [pc, #200]	; (800137c <HAL_GPIO_Init+0x350>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_GPIO_Init+0x350>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012dc:	4a27      	ldr	r2, [pc, #156]	; (800137c <HAL_GPIO_Init+0x350>)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_GPIO_Init+0x350>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_GPIO_Init+0x350>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_GPIO_Init+0x350>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <HAL_GPIO_Init+0x350>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa22 f303 	lsr.w	r3, r2, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	f47f ae78 	bne.w	800103c <HAL_GPIO_Init+0x10>
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000
 8001364:	48000400 	.word	0x48000400
 8001368:	48000800 	.word	0x48000800
 800136c:	48000c00 	.word	0x48000c00
 8001370:	48001000 	.word	0x48001000
 8001374:	48001400 	.word	0x48001400
 8001378:	48001800 	.word	0x48001800
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800139c:	e002      	b.n	80013a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40007000 	.word	0x40007000

080013cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013da:	d130      	bne.n	800143e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013e8:	d038      	beq.n	800145c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f2:	4a1e      	ldr	r2, [pc, #120]	; (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2232      	movs	r2, #50	; 0x32
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9b      	lsrs	r3, r3, #18
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001410:	e002      	b.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3b01      	subs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001424:	d102      	bne.n	800142c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f2      	bne.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001438:	d110      	bne.n	800145c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e00f      	b.n	800145e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144a:	d007      	beq.n	800145c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40007000 	.word	0x40007000
 8001470:	20000000 	.word	0x20000000
 8001474:	431bde83 	.word	0x431bde83

08001478 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e3ca      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148a:	4b97      	ldr	r3, [pc, #604]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001494:	4b94      	ldr	r3, [pc, #592]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80e4 	beq.w	8001674 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_RCC_OscConfig+0x4a>
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b0c      	cmp	r3, #12
 80014b6:	f040 808b 	bne.w	80015d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	f040 8087 	bne.w	80015d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014c2:	4b89      	ldr	r3, [pc, #548]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x62>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e3a2      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <HAL_RCC_OscConfig+0x7c>
 80014ea:	4b7f      	ldr	r3, [pc, #508]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014f2:	e005      	b.n	8001500 <HAL_RCC_OscConfig+0x88>
 80014f4:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001500:	4293      	cmp	r3, r2
 8001502:	d223      	bcs.n	800154c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fd55 	bl	8001fb8 <RCC_SetFlashLatencyFromMSIRange>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e383      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001518:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a72      	ldr	r2, [pc, #456]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	496d      	ldr	r1, [pc, #436]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001536:	4b6c      	ldr	r3, [pc, #432]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	4968      	ldr	r1, [pc, #416]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
 800154a:	e025      	b.n	8001598 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154c:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4960      	ldr	r1, [pc, #384]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	495b      	ldr	r1, [pc, #364]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fd15 	bl	8001fb8 <RCC_SetFlashLatencyFromMSIRange>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e343      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001598:	f000 fc4a 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 800159c:	4602      	mov	r2, r0
 800159e:	4b52      	ldr	r3, [pc, #328]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	4950      	ldr	r1, [pc, #320]	; (80016ec <HAL_RCC_OscConfig+0x274>)
 80015aa:	5ccb      	ldrb	r3, [r1, r3]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
 80015b4:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80015b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015b8:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fbcf 	bl	8000d60 <HAL_InitTick>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d052      	beq.n	8001672 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	e327      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d032      	beq.n	800163e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015d8:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a42      	ldr	r2, [pc, #264]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fc0c 	bl	8000e00 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ec:	f7ff fc08 	bl	8000e00 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e310      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a36      	ldr	r2, [pc, #216]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4931      	ldr	r1, [pc, #196]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001628:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	492c      	ldr	r1, [pc, #176]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
 800163c:	e01a      	b.n	8001674 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a29      	ldr	r2, [pc, #164]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800164a:	f7ff fbd9 	bl	8000e00 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001652:	f7ff fbd5 	bl	8000e00 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e2dd      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x1da>
 8001670:	e000      	b.n	8001674 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001672:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d074      	beq.n	800176a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b08      	cmp	r3, #8
 8001684:	d005      	beq.n	8001692 <HAL_RCC_OscConfig+0x21a>
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d10e      	bne.n	80016aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b03      	cmp	r3, #3
 8001690:	d10b      	bne.n	80016aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d064      	beq.n	8001768 <HAL_RCC_OscConfig+0x2f0>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d160      	bne.n	8001768 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e2ba      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x24a>
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e026      	b.n	8001710 <HAL_RCC_OscConfig+0x298>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ca:	d115      	bne.n	80016f8 <HAL_RCC_OscConfig+0x280>
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a02      	ldr	r2, [pc, #8]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x298>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	08005130 	.word	0x08005130
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004
 80016f8:	4ba0      	ldr	r3, [pc, #640]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a9f      	ldr	r2, [pc, #636]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b9d      	ldr	r3, [pc, #628]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a9c      	ldr	r2, [pc, #624]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fb72 	bl	8000e00 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fb6e 	bl	8000e00 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e276      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001732:	4b92      	ldr	r3, [pc, #584]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x2a8>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fb5e 	bl	8000e00 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fb5a 	bl	8000e00 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e262      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800175a:	4b88      	ldr	r3, [pc, #544]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x2d0>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d060      	beq.n	8001838 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b04      	cmp	r3, #4
 800177a:	d005      	beq.n	8001788 <HAL_RCC_OscConfig+0x310>
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d119      	bne.n	80017b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d116      	bne.n	80017b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001788:	4b7c      	ldr	r3, [pc, #496]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_OscConfig+0x328>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e23f      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b76      	ldr	r3, [pc, #472]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	4973      	ldr	r1, [pc, #460]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b4:	e040      	b.n	8001838 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d023      	beq.n	8001806 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017be:	4b6f      	ldr	r3, [pc, #444]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6e      	ldr	r2, [pc, #440]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff fb19 	bl	8000e00 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fb15 	bl	8000e00 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e21d      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e4:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b62      	ldr	r3, [pc, #392]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	495f      	ldr	r1, [pc, #380]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
 8001804:	e018      	b.n	8001838 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a5c      	ldr	r2, [pc, #368]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800180c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff faf5 	bl	8000e00 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181a:	f7ff faf1 	bl	8000e00 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e1f9      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182c:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d03c      	beq.n	80018be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01c      	beq.n	8001886 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184c:	4b4b      	ldr	r3, [pc, #300]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001852:	4a4a      	ldr	r2, [pc, #296]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff fad0 	bl	8000e00 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff facc 	bl	8000e00 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e1d4      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ef      	beq.n	8001864 <HAL_RCC_OscConfig+0x3ec>
 8001884:	e01b      	b.n	80018be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001886:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188c:	4a3b      	ldr	r2, [pc, #236]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fab3 	bl	8000e00 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff faaf 	bl	8000e00 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1b7      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ef      	bne.n	800189e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80a6 	beq.w	8001a18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10d      	bne.n	80018f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	4a26      	ldr	r2, [pc, #152]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80018e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e6:	6593      	str	r3, [r2, #88]	; 0x58
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f4:	2301      	movs	r3, #1
 80018f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x508>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d118      	bne.n	8001936 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <HAL_RCC_OscConfig+0x508>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <HAL_RCC_OscConfig+0x508>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001910:	f7ff fa76 	bl	8000e00 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001918:	f7ff fa72 	bl	8000e00 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e17a      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_RCC_OscConfig+0x508>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_RCC_OscConfig+0x4d8>
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800194e:	e029      	b.n	80019a4 <HAL_RCC_OscConfig+0x52c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d115      	bne.n	8001984 <HAL_RCC_OscConfig+0x50c>
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196e:	4a03      	ldr	r2, [pc, #12]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001978:	e014      	b.n	80019a4 <HAL_RCC_OscConfig+0x52c>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	40007000 	.word	0x40007000
 8001984:	4b9c      	ldr	r3, [pc, #624]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198a:	4a9b      	ldr	r2, [pc, #620]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001994:	4b98      	ldr	r3, [pc, #608]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	4a97      	ldr	r2, [pc, #604]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d016      	beq.n	80019da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff fa28 	bl	8000e00 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff fa24 	bl	8000e00 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e12a      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0ed      	beq.n	80019b4 <HAL_RCC_OscConfig+0x53c>
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fa11 	bl	8000e00 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff fa0d 	bl	8000e00 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e113      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f8:	4b7f      	ldr	r3, [pc, #508]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 80019fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ed      	bne.n	80019e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a06:	7ffb      	ldrb	r3, [r7, #31]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0c:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	4a79      	ldr	r2, [pc, #484]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80fe 	beq.w	8001c1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	f040 80d0 	bne.w	8001bcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a2c:	4b72      	ldr	r3, [pc, #456]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d130      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d127      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d11f      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a6c:	2a07      	cmp	r2, #7
 8001a6e:	bf14      	ite	ne
 8001a70:	2201      	movne	r2, #1
 8001a72:	2200      	moveq	r2, #0
 8001a74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d113      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	3b01      	subs	r3, #1
 8001a88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d109      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d06e      	beq.n	8001b80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	d069      	beq.n	8001b7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0ad      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a4b      	ldr	r2, [pc, #300]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ad0:	f7ff f996 	bl	8000e00 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f992 	bl	8000e00 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e09a      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aea:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	4b40      	ldr	r3, [pc, #256]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b06:	3a01      	subs	r2, #1
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	4311      	orrs	r1, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b10:	0212      	lsls	r2, r2, #8
 8001b12:	4311      	orrs	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b18:	0852      	lsrs	r2, r2, #1
 8001b1a:	3a01      	subs	r2, #1
 8001b1c:	0552      	lsls	r2, r2, #21
 8001b1e:	4311      	orrs	r1, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b24:	0852      	lsrs	r2, r2, #1
 8001b26:	3a01      	subs	r2, #1
 8001b28:	0652      	lsls	r2, r2, #25
 8001b2a:	4311      	orrs	r1, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b30:	0912      	lsrs	r2, r2, #4
 8001b32:	0452      	lsls	r2, r2, #17
 8001b34:	430a      	orrs	r2, r1
 8001b36:	4930      	ldr	r1, [pc, #192]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4a2a      	ldr	r2, [pc, #168]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b54:	f7ff f954 	bl	8000e00 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff f950 	bl	8000e00 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e058      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b7a:	e050      	b.n	8001c1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e04f      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d148      	bne.n	8001c1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ba4:	f7ff f92c 	bl	8000e00 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f928 	bl	8000e00 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e030      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x734>
 8001bca:	e028      	b.n	8001c1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d023      	beq.n	8001c1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff f90f 	bl	8000e00 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	e00c      	b.n	8001c00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff f90b 	bl	8000e00 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d905      	bls.n	8001c00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e013      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_OscConfig+0x7b0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ec      	bne.n	8001be6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_OscConfig+0x7b0>)
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4905      	ldr	r1, [pc, #20]	; (8001c28 <HAL_RCC_OscConfig+0x7b0>)
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_RCC_OscConfig+0x7b4>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
 8001c18:	e001      	b.n	8001c1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	feeefffc 	.word	0xfeeefffc

08001c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0e7      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c44:	4b75      	ldr	r3, [pc, #468]	; (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d910      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b72      	ldr	r3, [pc, #456]	; (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 0207 	bic.w	r2, r3, #7
 8001c5a:	4970      	ldr	r1, [pc, #448]	; (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b6e      	ldr	r3, [pc, #440]	; (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0cf      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d010      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4b66      	ldr	r3, [pc, #408]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d908      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4960      	ldr	r1, [pc, #384]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d04c      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	4b5a      	ldr	r3, [pc, #360]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d121      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0a6      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d115      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e09a      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce6:	4b4e      	ldr	r3, [pc, #312]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e08e      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e086      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d06:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f023 0203 	bic.w	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4943      	ldr	r1, [pc, #268]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d18:	f7ff f872 	bl	8000e00 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7ff f86e 	bl	8000e00 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e06e      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 020c 	and.w	r2, r3, #12
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d1eb      	bne.n	8001d20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d010      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d208      	bcs.n	8001d76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d64:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	492b      	ldr	r1, [pc, #172]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d210      	bcs.n	8001da6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 0207 	bic.w	r2, r3, #7
 8001d8c:	4923      	ldr	r1, [pc, #140]	; (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e036      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4918      	ldr	r1, [pc, #96]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d009      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4910      	ldr	r1, [pc, #64]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001de4:	f000 f824 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	490b      	ldr	r1, [pc, #44]	; (8001e24 <HAL_RCC_ClockConfig+0x1f4>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_RCC_ClockConfig+0x1fc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe ffa9 	bl	8000d60 <HAL_InitTick>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e12:	7afb      	ldrb	r3, [r7, #11]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40022000 	.word	0x40022000
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08005130 	.word	0x08005130
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000004 	.word	0x20000004

08001e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3e:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e48:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x34>
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d121      	bne.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d11e      	bne.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e70:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e005      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e8c:	4a2b      	ldr	r2, [pc, #172]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	e004      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d134      	bne.n	8001f28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d003      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0xac>
 8001ed4:	e005      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed8:	617b      	str	r3, [r7, #20]
      break;
 8001eda:	e005      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ede:	617b      	str	r3, [r7, #20]
      break;
 8001ee0:	e002      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	617b      	str	r3, [r7, #20]
      break;
 8001ee6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	fb03 f202 	mul.w	r2, r3, r2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	0e5b      	lsrs	r3, r3, #25
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f28:	69bb      	ldr	r3, [r7, #24]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08005148 	.word	0x08005148
 8001f40:	00f42400 	.word	0x00f42400
 8001f44:	007a1200 	.word	0x007a1200

08001f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000000 	.word	0x20000000

08001f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f64:	f7ff fff0 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4904      	ldr	r1, [pc, #16]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08005140 	.word	0x08005140

08001f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f90:	f7ff ffda 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0adb      	lsrs	r3, r3, #11
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08005140 	.word	0x08005140

08001fb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fd0:	f7ff f9ee 	bl	80013b0 <HAL_PWREx_GetVoltageRange>
 8001fd4:	6178      	str	r0, [r7, #20]
 8001fd6:	e014      	b.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	4a24      	ldr	r2, [pc, #144]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ff0:	f7ff f9de 	bl	80013b0 <HAL_PWREx_GetVoltageRange>
 8001ff4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002000:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002008:	d10b      	bne.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d919      	bls.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2ba0      	cmp	r3, #160	; 0xa0
 8002014:	d902      	bls.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002016:	2302      	movs	r3, #2
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	e013      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800201c:	2301      	movs	r3, #1
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	e010      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b80      	cmp	r3, #128	; 0x80
 8002026:	d902      	bls.n	800202e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002028:	2303      	movs	r3, #3
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	e00a      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d102      	bne.n	800203a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002034:	2302      	movs	r3, #2
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	e004      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b70      	cmp	r3, #112	; 0x70
 800203e:	d101      	bne.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002040:	2301      	movs	r3, #1
 8002042:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 0207 	bic.w	r2, r3, #7
 800204c:	4909      	ldr	r1, [pc, #36]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	429a      	cmp	r2, r3
 8002060:	d001      	beq.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	40022000 	.word	0x40022000

08002078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002080:	2300      	movs	r3, #0
 8002082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002084:	2300      	movs	r3, #0
 8002086:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002090:	2b00      	cmp	r3, #0
 8002092:	d041      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002098:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800209c:	d02a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800209e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020a2:	d824      	bhi.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020a8:	d008      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020ae:	d81e      	bhi.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b8:	d010      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020ba:	e018      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020bc:	4b86      	ldr	r3, [pc, #536]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4a85      	ldr	r2, [pc, #532]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020c8:	e015      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fabb 	bl	800264c <RCCEx_PLLSAI1_Config>
 80020d6:	4603      	mov	r3, r0
 80020d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020da:	e00c      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3320      	adds	r3, #32
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fba6 	bl	8002834 <RCCEx_PLLSAI2_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020ec:	e003      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	74fb      	strb	r3, [r7, #19]
      break;
 80020f2:	e000      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10b      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020fc:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800210a:	4973      	ldr	r1, [pc, #460]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002112:	e001      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d041      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002128:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800212c:	d02a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800212e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002132:	d824      	bhi.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002134:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002138:	d008      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800213a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800213e:	d81e      	bhi.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002148:	d010      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800214a:	e018      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800214c:	4b62      	ldr	r3, [pc, #392]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a61      	ldr	r2, [pc, #388]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002156:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002158:	e015      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3304      	adds	r3, #4
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fa73 	bl	800264c <RCCEx_PLLSAI1_Config>
 8002166:	4603      	mov	r3, r0
 8002168:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800216a:	e00c      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3320      	adds	r3, #32
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fb5e 	bl	8002834 <RCCEx_PLLSAI2_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800217c:	e003      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	74fb      	strb	r3, [r7, #19]
      break;
 8002182:	e000      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10b      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800218c:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800219a:	494f      	ldr	r1, [pc, #316]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021a2:	e001      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80a0 	beq.w	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021ca:	2300      	movs	r3, #0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	4a40      	ldr	r2, [pc, #256]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021da:	6593      	str	r3, [r2, #88]	; 0x58
 80021dc:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e8:	2301      	movs	r3, #1
 80021ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fe02 	bl	8000e00 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021fe:	e009      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002200:	f7fe fdfe 	bl	8000e00 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d902      	bls.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	74fb      	strb	r3, [r7, #19]
        break;
 8002212:	e005      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002214:	4b31      	ldr	r3, [pc, #196]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ef      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d15c      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002230:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01f      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	429a      	cmp	r2, r3
 8002242:	d019      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002244:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002256:	4a20      	ldr	r2, [pc, #128]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002260:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d016      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7fe fdbd 	bl	8000e00 <HAL_GetTick>
 8002286:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002288:	e00b      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe fdb9 	bl	8000e00 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d902      	bls.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	74fb      	strb	r3, [r7, #19]
            break;
 80022a0:	e006      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ec      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c6:	4904      	ldr	r1, [pc, #16]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022ce:	e009      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	74bb      	strb	r3, [r7, #18]
 80022d4:	e006      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e4:	7c7b      	ldrb	r3, [r7, #17]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b9e      	ldr	r3, [pc, #632]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	4a9d      	ldr	r2, [pc, #628]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002302:	4b98      	ldr	r3, [pc, #608]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f023 0203 	bic.w	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	4994      	ldr	r1, [pc, #592]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002324:	4b8f      	ldr	r3, [pc, #572]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 020c 	bic.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	498c      	ldr	r1, [pc, #560]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002346:	4b87      	ldr	r3, [pc, #540]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	4983      	ldr	r1, [pc, #524]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002368:	4b7e      	ldr	r3, [pc, #504]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	497b      	ldr	r1, [pc, #492]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800238a:	4b76      	ldr	r3, [pc, #472]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	4972      	ldr	r1, [pc, #456]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ac:	4b6d      	ldr	r3, [pc, #436]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	496a      	ldr	r1, [pc, #424]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ce:	4b65      	ldr	r3, [pc, #404]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	4961      	ldr	r1, [pc, #388]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023f0:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	4959      	ldr	r1, [pc, #356]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002412:	4b54      	ldr	r3, [pc, #336]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002420:	4950      	ldr	r1, [pc, #320]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	4948      	ldr	r1, [pc, #288]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002456:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	493f      	ldr	r1, [pc, #252]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d028      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002478:	4b3a      	ldr	r3, [pc, #232]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002486:	4937      	ldr	r1, [pc, #220]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002496:	d106      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002498:	4b32      	ldr	r3, [pc, #200]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a31      	ldr	r2, [pc, #196]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a2:	60d3      	str	r3, [r2, #12]
 80024a4:	e011      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ae:	d10c      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3304      	adds	r3, #4
 80024b4:	2101      	movs	r1, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f8c8 	bl	800264c <RCCEx_PLLSAI1_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d028      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024d6:	4b23      	ldr	r3, [pc, #140]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	491f      	ldr	r1, [pc, #124]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f4:	d106      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002500:	60d3      	str	r3, [r2, #12]
 8002502:	e011      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800250c:	d10c      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3304      	adds	r3, #4
 8002512:	2101      	movs	r1, #1
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f899 	bl	800264c <RCCEx_PLLSAI1_Config>
 800251a:	4603      	mov	r3, r0
 800251c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d02b      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002542:	4908      	ldr	r1, [pc, #32]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002552:	d109      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a02      	ldr	r2, [pc, #8]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800255e:	60d3      	str	r3, [r2, #12]
 8002560:	e014      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002570:	d10c      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f867 	bl	800264c <RCCEx_PLLSAI1_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d02f      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025a6:	4928      	ldr	r1, [pc, #160]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025b6:	d10d      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	2102      	movs	r1, #2
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f844 	bl	800264c <RCCEx_PLLSAI1_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d014      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	74bb      	strb	r3, [r7, #18]
 80025d2:	e011      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3320      	adds	r3, #32
 80025e2:	2102      	movs	r1, #2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 f925 	bl	8002834 <RCCEx_PLLSAI2_Config>
 80025ea:	4603      	mov	r3, r0
 80025ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002612:	490d      	ldr	r1, [pc, #52]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002636:	4904      	ldr	r1, [pc, #16]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800263e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000

0800264c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800265a:	4b75      	ldr	r3, [pc, #468]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d018      	beq.n	8002698 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002666:	4b72      	ldr	r3, [pc, #456]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0203 	and.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d10d      	bne.n	8002692 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
       ||
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800267e:	4b6c      	ldr	r3, [pc, #432]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
       ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d047      	beq.n	8002722 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e044      	b.n	8002722 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d018      	beq.n	80026d2 <RCCEx_PLLSAI1_Config+0x86>
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d825      	bhi.n	80026f0 <RCCEx_PLLSAI1_Config+0xa4>
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d002      	beq.n	80026ae <RCCEx_PLLSAI1_Config+0x62>
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d009      	beq.n	80026c0 <RCCEx_PLLSAI1_Config+0x74>
 80026ac:	e020      	b.n	80026f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ae:	4b60      	ldr	r3, [pc, #384]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d11d      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026be:	e01a      	b.n	80026f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026c0:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d116      	bne.n	80026fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d0:	e013      	b.n	80026fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026d2:	4b57      	ldr	r3, [pc, #348]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026de:	4b54      	ldr	r3, [pc, #336]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026ee:	e006      	b.n	80026fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
      break;
 80026f4:	e004      	b.n	8002700 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026f6:	bf00      	nop
 80026f8:	e002      	b.n	8002700 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026fa:	bf00      	nop
 80026fc:	e000      	b.n	8002700 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10d      	bne.n	8002722 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002706:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	430b      	orrs	r3, r1
 800271c:	4944      	ldr	r1, [pc, #272]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d17d      	bne.n	8002824 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002728:	4b41      	ldr	r3, [pc, #260]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a40      	ldr	r2, [pc, #256]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe fb64 	bl	8000e00 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800273a:	e009      	b.n	8002750 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800273c:	f7fe fb60 	bl	8000e00 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d902      	bls.n	8002750 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	73fb      	strb	r3, [r7, #15]
        break;
 800274e:	e005      	b.n	800275c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ef      	bne.n	800273c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d160      	bne.n	8002824 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d111      	bne.n	800278c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	0211      	lsls	r1, r2, #8
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	0912      	lsrs	r2, r2, #4
 8002780:	0452      	lsls	r2, r2, #17
 8002782:	430a      	orrs	r2, r1
 8002784:	492a      	ldr	r1, [pc, #168]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	610b      	str	r3, [r1, #16]
 800278a:	e027      	b.n	80027dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d112      	bne.n	80027b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002792:	4b27      	ldr	r3, [pc, #156]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800279a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6892      	ldr	r2, [r2, #8]
 80027a2:	0211      	lsls	r1, r2, #8
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6912      	ldr	r2, [r2, #16]
 80027a8:	0852      	lsrs	r2, r2, #1
 80027aa:	3a01      	subs	r2, #1
 80027ac:	0552      	lsls	r2, r2, #21
 80027ae:	430a      	orrs	r2, r1
 80027b0:	491f      	ldr	r1, [pc, #124]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	610b      	str	r3, [r1, #16]
 80027b6:	e011      	b.n	80027dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6892      	ldr	r2, [r2, #8]
 80027c8:	0211      	lsls	r1, r2, #8
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6952      	ldr	r2, [r2, #20]
 80027ce:	0852      	lsrs	r2, r2, #1
 80027d0:	3a01      	subs	r2, #1
 80027d2:	0652      	lsls	r2, r2, #25
 80027d4:	430a      	orrs	r2, r1
 80027d6:	4916      	ldr	r1, [pc, #88]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a13      	ldr	r2, [pc, #76]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7fe fb0a 	bl	8000e00 <HAL_GetTick>
 80027ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ee:	e009      	b.n	8002804 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027f0:	f7fe fb06 	bl	8000e00 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d902      	bls.n	8002804 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	73fb      	strb	r3, [r7, #15]
          break;
 8002802:	e005      	b.n	8002810 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ef      	beq.n	80027f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	4904      	ldr	r1, [pc, #16]	; (8002830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000

08002834 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002842:	4b6a      	ldr	r3, [pc, #424]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d018      	beq.n	8002880 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800284e:	4b67      	ldr	r3, [pc, #412]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d10d      	bne.n	800287a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
       ||
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002866:	4b61      	ldr	r3, [pc, #388]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
       ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d047      	beq.n	800290a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	e044      	b.n	800290a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d018      	beq.n	80028ba <RCCEx_PLLSAI2_Config+0x86>
 8002888:	2b03      	cmp	r3, #3
 800288a:	d825      	bhi.n	80028d8 <RCCEx_PLLSAI2_Config+0xa4>
 800288c:	2b01      	cmp	r3, #1
 800288e:	d002      	beq.n	8002896 <RCCEx_PLLSAI2_Config+0x62>
 8002890:	2b02      	cmp	r3, #2
 8002892:	d009      	beq.n	80028a8 <RCCEx_PLLSAI2_Config+0x74>
 8002894:	e020      	b.n	80028d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002896:	4b55      	ldr	r3, [pc, #340]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d11d      	bne.n	80028de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a6:	e01a      	b.n	80028de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028a8:	4b50      	ldr	r3, [pc, #320]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e013      	b.n	80028e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028c6:	4b49      	ldr	r3, [pc, #292]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028d6:	e006      	b.n	80028e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e004      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ee:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	430b      	orrs	r3, r1
 8002904:	4939      	ldr	r1, [pc, #228]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002906:	4313      	orrs	r3, r2
 8002908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d167      	bne.n	80029e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002910:	4b36      	ldr	r3, [pc, #216]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a35      	ldr	r2, [pc, #212]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe fa70 	bl	8000e00 <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002922:	e009      	b.n	8002938 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002924:	f7fe fa6c 	bl	8000e00 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d902      	bls.n	8002938 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	73fb      	strb	r3, [r7, #15]
        break;
 8002936:	e005      	b.n	8002944 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002938:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1ef      	bne.n	8002924 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d14a      	bne.n	80029e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	0211      	lsls	r1, r2, #8
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	0912      	lsrs	r2, r2, #4
 8002968:	0452      	lsls	r2, r2, #17
 800296a:	430a      	orrs	r2, r1
 800296c:	491f      	ldr	r1, [pc, #124]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800296e:	4313      	orrs	r3, r2
 8002970:	614b      	str	r3, [r1, #20]
 8002972:	e011      	b.n	8002998 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002974:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800297c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6892      	ldr	r2, [r2, #8]
 8002984:	0211      	lsls	r1, r2, #8
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6912      	ldr	r2, [r2, #16]
 800298a:	0852      	lsrs	r2, r2, #1
 800298c:	3a01      	subs	r2, #1
 800298e:	0652      	lsls	r2, r2, #25
 8002990:	430a      	orrs	r2, r1
 8002992:	4916      	ldr	r1, [pc, #88]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002994:	4313      	orrs	r3, r2
 8002996:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002998:	4b14      	ldr	r3, [pc, #80]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a13      	ldr	r2, [pc, #76]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7fe fa2c 	bl	8000e00 <HAL_GetTick>
 80029a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029aa:	e009      	b.n	80029c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029ac:	f7fe fa28 	bl	8000e00 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d902      	bls.n	80029c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	73fb      	strb	r3, [r7, #15]
          break;
 80029be:	e005      	b.n	80029cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ef      	beq.n	80029ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4904      	ldr	r1, [pc, #16]	; (80029ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000

080029f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e049      	b.n	8002a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fd fffa 	bl	8000a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	f000 fbec 	bl	800320c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d001      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e04f      	b.n	8002b58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01d      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x76>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d018      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x76>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <HAL_TIM_Base_Start_IT+0xc8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x76>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_TIM_Base_Start_IT+0xcc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00e      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x76>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_TIM_Base_Start_IT+0xd0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x76>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x76>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d115      	bne.n	8002b42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <HAL_TIM_Base_Start_IT+0xdc>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b06      	cmp	r3, #6
 8002b26:	d015      	beq.n	8002b54 <HAL_TIM_Base_Start_IT+0xb4>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2e:	d011      	beq.n	8002b54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b40:	e008      	b.n	8002b54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e000      	b.n	8002b56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40013400 	.word	0x40013400
 8002b78:	40014000 	.word	0x40014000
 8002b7c:	00010007 	.word	0x00010007

08002b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e049      	b.n	8002c26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f841 	bl	8002c2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f000 fb24 	bl	800320c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_TIM_PWM_Start+0x24>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e03c      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x9e>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d109      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x3e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e02f      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x9e>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d109      	bne.n	8002c9c <HAL_TIM_PWM_Start+0x58>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e022      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x9e>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	d109      	bne.n	8002cb6 <HAL_TIM_PWM_Start+0x72>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e015      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x9e>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d109      	bne.n	8002cd0 <HAL_TIM_PWM_Start+0x8c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e008      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x9e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e09c      	b.n	8002e24 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0xb6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf8:	e023      	b.n	8002d42 <HAL_TIM_PWM_Start+0xfe>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0xc6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d08:	e01b      	b.n	8002d42 <HAL_TIM_PWM_Start+0xfe>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_PWM_Start+0xd6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d18:	e013      	b.n	8002d42 <HAL_TIM_PWM_Start+0xfe>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_PWM_Start+0xe6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d28:	e00b      	b.n	8002d42 <HAL_TIM_PWM_Start+0xfe>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_PWM_Start+0xf6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d38:	e003      	b.n	8002d42 <HAL_TIM_PWM_Start+0xfe>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2201      	movs	r2, #1
 8002d48:	6839      	ldr	r1, [r7, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fe68 	bl	8003a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a35      	ldr	r2, [pc, #212]	; (8002e2c <HAL_TIM_PWM_Start+0x1e8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x13e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_TIM_PWM_Start+0x1ec>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00e      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x13e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a32      	ldr	r2, [pc, #200]	; (8002e34 <HAL_TIM_PWM_Start+0x1f0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x13e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <HAL_TIM_PWM_Start+0x1f4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x13e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <HAL_TIM_PWM_Start+0x1f8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x142>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_TIM_PWM_Start+0x144>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_TIM_PWM_Start+0x1e8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01d      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x19e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dae:	d018      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x19e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <HAL_TIM_PWM_Start+0x1fc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x19e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <HAL_TIM_PWM_Start+0x200>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x19e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <HAL_TIM_PWM_Start+0x204>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d009      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x19e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <HAL_TIM_PWM_Start+0x1ec>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x19e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <HAL_TIM_PWM_Start+0x1f0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d115      	bne.n	8002e0e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <HAL_TIM_PWM_Start+0x208>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b06      	cmp	r3, #6
 8002df2:	d015      	beq.n	8002e20 <HAL_TIM_PWM_Start+0x1dc>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfa:	d011      	beq.n	8002e20 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0c:	e008      	b.n	8002e20 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e000      	b.n	8002e22 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40012c00 	.word	0x40012c00
 8002e30:	40013400 	.word	0x40013400
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	40014800 	.word	0x40014800
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800
 8002e48:	40000c00 	.word	0x40000c00
 8002e4c:	00010007 	.word	0x00010007

08002e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e0ff      	b.n	800306e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b14      	cmp	r3, #20
 8002e7a:	f200 80f0 	bhi.w	800305e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002ed9 	.word	0x08002ed9
 8002e88:	0800305f 	.word	0x0800305f
 8002e8c:	0800305f 	.word	0x0800305f
 8002e90:	0800305f 	.word	0x0800305f
 8002e94:	08002f19 	.word	0x08002f19
 8002e98:	0800305f 	.word	0x0800305f
 8002e9c:	0800305f 	.word	0x0800305f
 8002ea0:	0800305f 	.word	0x0800305f
 8002ea4:	08002f5b 	.word	0x08002f5b
 8002ea8:	0800305f 	.word	0x0800305f
 8002eac:	0800305f 	.word	0x0800305f
 8002eb0:	0800305f 	.word	0x0800305f
 8002eb4:	08002f9b 	.word	0x08002f9b
 8002eb8:	0800305f 	.word	0x0800305f
 8002ebc:	0800305f 	.word	0x0800305f
 8002ec0:	0800305f 	.word	0x0800305f
 8002ec4:	08002fdd 	.word	0x08002fdd
 8002ec8:	0800305f 	.word	0x0800305f
 8002ecc:	0800305f 	.word	0x0800305f
 8002ed0:	0800305f 	.word	0x0800305f
 8002ed4:	0800301d 	.word	0x0800301d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fa2e 	bl	8003340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0208 	orr.w	r2, r2, #8
 8002ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6999      	ldr	r1, [r3, #24]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	619a      	str	r2, [r3, #24]
      break;
 8002f16:	e0a5      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fa9e 	bl	8003460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	021a      	lsls	r2, r3, #8
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	619a      	str	r2, [r3, #24]
      break;
 8002f58:	e084      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fb07 	bl	8003574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0208 	orr.w	r2, r2, #8
 8002f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0204 	bic.w	r2, r2, #4
 8002f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	61da      	str	r2, [r3, #28]
      break;
 8002f98:	e064      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fb6f 	bl	8003684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	021a      	lsls	r2, r3, #8
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	61da      	str	r2, [r3, #28]
      break;
 8002fda:	e043      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fbb8 	bl	8003758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0208 	orr.w	r2, r2, #8
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0204 	bic.w	r2, r2, #4
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800301a:	e023      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fbfc 	bl	8003820 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003036:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003046:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	021a      	lsls	r2, r3, #8
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800305c:	e002      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	75fb      	strb	r3, [r7, #23]
      break;
 8003062:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop

08003078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_TIM_ConfigClockSource+0x1c>
 8003090:	2302      	movs	r3, #2
 8003092:	e0b6      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x18a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d0:	d03e      	beq.n	8003150 <HAL_TIM_ConfigClockSource+0xd8>
 80030d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d6:	f200 8087 	bhi.w	80031e8 <HAL_TIM_ConfigClockSource+0x170>
 80030da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030de:	f000 8086 	beq.w	80031ee <HAL_TIM_ConfigClockSource+0x176>
 80030e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e6:	d87f      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x170>
 80030e8:	2b70      	cmp	r3, #112	; 0x70
 80030ea:	d01a      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0xaa>
 80030ec:	2b70      	cmp	r3, #112	; 0x70
 80030ee:	d87b      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x170>
 80030f0:	2b60      	cmp	r3, #96	; 0x60
 80030f2:	d050      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x11e>
 80030f4:	2b60      	cmp	r3, #96	; 0x60
 80030f6:	d877      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x170>
 80030f8:	2b50      	cmp	r3, #80	; 0x50
 80030fa:	d03c      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0xfe>
 80030fc:	2b50      	cmp	r3, #80	; 0x50
 80030fe:	d873      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x170>
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d058      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x13e>
 8003104:	2b40      	cmp	r3, #64	; 0x40
 8003106:	d86f      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x170>
 8003108:	2b30      	cmp	r3, #48	; 0x30
 800310a:	d064      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x15e>
 800310c:	2b30      	cmp	r3, #48	; 0x30
 800310e:	d86b      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x170>
 8003110:	2b20      	cmp	r3, #32
 8003112:	d060      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x15e>
 8003114:	2b20      	cmp	r3, #32
 8003116:	d867      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x170>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05c      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x15e>
 800311c:	2b10      	cmp	r3, #16
 800311e:	d05a      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x15e>
 8003120:	e062      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003132:	f000 fc55 	bl	80039e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	609a      	str	r2, [r3, #8]
      break;
 800314e:	e04f      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003160:	f000 fc3e 	bl	80039e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003172:	609a      	str	r2, [r3, #8]
      break;
 8003174:	e03c      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003182:	461a      	mov	r2, r3
 8003184:	f000 fbb2 	bl	80038ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2150      	movs	r1, #80	; 0x50
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fc0b 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 8003194:	e02c      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a2:	461a      	mov	r2, r3
 80031a4:	f000 fbd1 	bl	800394a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2160      	movs	r1, #96	; 0x60
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fbfb 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 80031b4:	e01c      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c2:	461a      	mov	r2, r3
 80031c4:	f000 fb92 	bl	80038ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2140      	movs	r1, #64	; 0x40
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fbeb 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 80031d4:	e00c      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f000 fbe2 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 80031e6:	e003      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e000      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80031ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a40      	ldr	r2, [pc, #256]	; (8003320 <TIM_Base_SetConfig+0x114>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d013      	beq.n	800324c <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322a:	d00f      	beq.n	800324c <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3d      	ldr	r2, [pc, #244]	; (8003324 <TIM_Base_SetConfig+0x118>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00b      	beq.n	800324c <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3c      	ldr	r2, [pc, #240]	; (8003328 <TIM_Base_SetConfig+0x11c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3b      	ldr	r2, [pc, #236]	; (800332c <TIM_Base_SetConfig+0x120>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0x40>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3a      	ldr	r2, [pc, #232]	; (8003330 <TIM_Base_SetConfig+0x124>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d108      	bne.n	800325e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2f      	ldr	r2, [pc, #188]	; (8003320 <TIM_Base_SetConfig+0x114>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01f      	beq.n	80032a6 <TIM_Base_SetConfig+0x9a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326c:	d01b      	beq.n	80032a6 <TIM_Base_SetConfig+0x9a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <TIM_Base_SetConfig+0x118>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d017      	beq.n	80032a6 <TIM_Base_SetConfig+0x9a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2b      	ldr	r2, [pc, #172]	; (8003328 <TIM_Base_SetConfig+0x11c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <TIM_Base_SetConfig+0x9a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2a      	ldr	r2, [pc, #168]	; (800332c <TIM_Base_SetConfig+0x120>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00f      	beq.n	80032a6 <TIM_Base_SetConfig+0x9a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a29      	ldr	r2, [pc, #164]	; (8003330 <TIM_Base_SetConfig+0x124>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00b      	beq.n	80032a6 <TIM_Base_SetConfig+0x9a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a28      	ldr	r2, [pc, #160]	; (8003334 <TIM_Base_SetConfig+0x128>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <TIM_Base_SetConfig+0x9a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a27      	ldr	r2, [pc, #156]	; (8003338 <TIM_Base_SetConfig+0x12c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d003      	beq.n	80032a6 <TIM_Base_SetConfig+0x9a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a26      	ldr	r2, [pc, #152]	; (800333c <TIM_Base_SetConfig+0x130>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d108      	bne.n	80032b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a10      	ldr	r2, [pc, #64]	; (8003320 <TIM_Base_SetConfig+0x114>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00f      	beq.n	8003304 <TIM_Base_SetConfig+0xf8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <TIM_Base_SetConfig+0x124>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00b      	beq.n	8003304 <TIM_Base_SetConfig+0xf8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a11      	ldr	r2, [pc, #68]	; (8003334 <TIM_Base_SetConfig+0x128>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d007      	beq.n	8003304 <TIM_Base_SetConfig+0xf8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a10      	ldr	r2, [pc, #64]	; (8003338 <TIM_Base_SetConfig+0x12c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d003      	beq.n	8003304 <TIM_Base_SetConfig+0xf8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0f      	ldr	r2, [pc, #60]	; (800333c <TIM_Base_SetConfig+0x130>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d103      	bne.n	800330c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	615a      	str	r2, [r3, #20]
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800
 800332c:	40000c00 	.word	0x40000c00
 8003330:	40013400 	.word	0x40013400
 8003334:	40014000 	.word	0x40014000
 8003338:	40014400 	.word	0x40014400
 800333c:	40014800 	.word	0x40014800

08003340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 0201 	bic.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f023 0302 	bic.w	r3, r3, #2
 800338c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a2c      	ldr	r2, [pc, #176]	; (800344c <TIM_OC1_SetConfig+0x10c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00f      	beq.n	80033c0 <TIM_OC1_SetConfig+0x80>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <TIM_OC1_SetConfig+0x110>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00b      	beq.n	80033c0 <TIM_OC1_SetConfig+0x80>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <TIM_OC1_SetConfig+0x114>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d007      	beq.n	80033c0 <TIM_OC1_SetConfig+0x80>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a29      	ldr	r2, [pc, #164]	; (8003458 <TIM_OC1_SetConfig+0x118>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_OC1_SetConfig+0x80>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a28      	ldr	r2, [pc, #160]	; (800345c <TIM_OC1_SetConfig+0x11c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10c      	bne.n	80033da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0308 	bic.w	r3, r3, #8
 80033c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f023 0304 	bic.w	r3, r3, #4
 80033d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <TIM_OC1_SetConfig+0x10c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00f      	beq.n	8003402 <TIM_OC1_SetConfig+0xc2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a1a      	ldr	r2, [pc, #104]	; (8003450 <TIM_OC1_SetConfig+0x110>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00b      	beq.n	8003402 <TIM_OC1_SetConfig+0xc2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <TIM_OC1_SetConfig+0x114>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <TIM_OC1_SetConfig+0xc2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a18      	ldr	r2, [pc, #96]	; (8003458 <TIM_OC1_SetConfig+0x118>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_OC1_SetConfig+0xc2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a17      	ldr	r2, [pc, #92]	; (800345c <TIM_OC1_SetConfig+0x11c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d111      	bne.n	8003426 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	621a      	str	r2, [r3, #32]
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40013400 	.word	0x40013400
 8003454:	40014000 	.word	0x40014000
 8003458:	40014400 	.word	0x40014400
 800345c:	40014800 	.word	0x40014800

08003460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f023 0210 	bic.w	r2, r3, #16
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800348e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 0320 	bic.w	r3, r3, #32
 80034ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a28      	ldr	r2, [pc, #160]	; (8003560 <TIM_OC2_SetConfig+0x100>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <TIM_OC2_SetConfig+0x6c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a27      	ldr	r2, [pc, #156]	; (8003564 <TIM_OC2_SetConfig+0x104>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d10d      	bne.n	80034e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <TIM_OC2_SetConfig+0x100>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00f      	beq.n	8003510 <TIM_OC2_SetConfig+0xb0>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <TIM_OC2_SetConfig+0x104>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00b      	beq.n	8003510 <TIM_OC2_SetConfig+0xb0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <TIM_OC2_SetConfig+0x108>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <TIM_OC2_SetConfig+0xb0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a1a      	ldr	r2, [pc, #104]	; (800356c <TIM_OC2_SetConfig+0x10c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d003      	beq.n	8003510 <TIM_OC2_SetConfig+0xb0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a19      	ldr	r2, [pc, #100]	; (8003570 <TIM_OC2_SetConfig+0x110>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d113      	bne.n	8003538 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800351e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40012c00 	.word	0x40012c00
 8003564:	40013400 	.word	0x40013400
 8003568:	40014000 	.word	0x40014000
 800356c:	40014400 	.word	0x40014400
 8003570:	40014800 	.word	0x40014800

08003574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a27      	ldr	r2, [pc, #156]	; (8003670 <TIM_OC3_SetConfig+0xfc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_OC3_SetConfig+0x6a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a26      	ldr	r2, [pc, #152]	; (8003674 <TIM_OC3_SetConfig+0x100>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10d      	bne.n	80035fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <TIM_OC3_SetConfig+0xfc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00f      	beq.n	8003622 <TIM_OC3_SetConfig+0xae>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <TIM_OC3_SetConfig+0x100>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00b      	beq.n	8003622 <TIM_OC3_SetConfig+0xae>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1a      	ldr	r2, [pc, #104]	; (8003678 <TIM_OC3_SetConfig+0x104>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <TIM_OC3_SetConfig+0xae>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a19      	ldr	r2, [pc, #100]	; (800367c <TIM_OC3_SetConfig+0x108>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d003      	beq.n	8003622 <TIM_OC3_SetConfig+0xae>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a18      	ldr	r2, [pc, #96]	; (8003680 <TIM_OC3_SetConfig+0x10c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d113      	bne.n	800364a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40013400 	.word	0x40013400
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800

08003684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	031b      	lsls	r3, r3, #12
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a18      	ldr	r2, [pc, #96]	; (8003744 <TIM_OC4_SetConfig+0xc0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00f      	beq.n	8003708 <TIM_OC4_SetConfig+0x84>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a17      	ldr	r2, [pc, #92]	; (8003748 <TIM_OC4_SetConfig+0xc4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00b      	beq.n	8003708 <TIM_OC4_SetConfig+0x84>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a16      	ldr	r2, [pc, #88]	; (800374c <TIM_OC4_SetConfig+0xc8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d007      	beq.n	8003708 <TIM_OC4_SetConfig+0x84>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <TIM_OC4_SetConfig+0xcc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d003      	beq.n	8003708 <TIM_OC4_SetConfig+0x84>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a14      	ldr	r2, [pc, #80]	; (8003754 <TIM_OC4_SetConfig+0xd0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d109      	bne.n	800371c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800370e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	019b      	lsls	r3, r3, #6
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40013400 	.word	0x40013400
 800374c:	40014000 	.word	0x40014000
 8003750:	40014400 	.word	0x40014400
 8003754:	40014800 	.word	0x40014800

08003758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800379c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a17      	ldr	r2, [pc, #92]	; (800380c <TIM_OC5_SetConfig+0xb4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00f      	beq.n	80037d2 <TIM_OC5_SetConfig+0x7a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a16      	ldr	r2, [pc, #88]	; (8003810 <TIM_OC5_SetConfig+0xb8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00b      	beq.n	80037d2 <TIM_OC5_SetConfig+0x7a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a15      	ldr	r2, [pc, #84]	; (8003814 <TIM_OC5_SetConfig+0xbc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <TIM_OC5_SetConfig+0x7a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <TIM_OC5_SetConfig+0xc0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_OC5_SetConfig+0x7a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a13      	ldr	r2, [pc, #76]	; (800381c <TIM_OC5_SetConfig+0xc4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d109      	bne.n	80037e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40013400 	.word	0x40013400
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800

08003820 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800384e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	051b      	lsls	r3, r3, #20
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <TIM_OC6_SetConfig+0xb8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00f      	beq.n	800389c <TIM_OC6_SetConfig+0x7c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a17      	ldr	r2, [pc, #92]	; (80038dc <TIM_OC6_SetConfig+0xbc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00b      	beq.n	800389c <TIM_OC6_SetConfig+0x7c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a16      	ldr	r2, [pc, #88]	; (80038e0 <TIM_OC6_SetConfig+0xc0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <TIM_OC6_SetConfig+0x7c>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <TIM_OC6_SetConfig+0xc4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d003      	beq.n	800389c <TIM_OC6_SetConfig+0x7c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <TIM_OC6_SetConfig+0xc8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d109      	bne.n	80038b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	029b      	lsls	r3, r3, #10
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	621a      	str	r2, [r3, #32]
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	40013400 	.word	0x40013400
 80038e0:	40014000 	.word	0x40014000
 80038e4:	40014400 	.word	0x40014400
 80038e8:	40014800 	.word	0x40014800

080038ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0201 	bic.w	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f023 030a 	bic.w	r3, r3, #10
 8003928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800394a:	b480      	push	{r7}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f023 0210 	bic.w	r2, r3, #16
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	031b      	lsls	r3, r3, #12
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003986:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f043 0307 	orr.w	r3, r3, #7
 80039cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	609a      	str	r2, [r3, #8]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	021a      	lsls	r2, r3, #8
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	609a      	str	r2, [r3, #8]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2201      	movs	r2, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1a      	ldr	r2, [r3, #32]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	401a      	ands	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a1a      	ldr	r2, [r3, #32]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e068      	b.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2e      	ldr	r2, [pc, #184]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a2d      	ldr	r2, [pc, #180]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d108      	bne.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003abe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01d      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af6:	d018      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1b      	ldr	r2, [pc, #108]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00e      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d009      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d004      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10c      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40013400 	.word	0x40013400
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	40014000 	.word	0x40014000

08003b7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e065      	b.n	8003c64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d115      	bne.n	8003c52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	051b      	lsls	r3, r3, #20
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40012c00 	.word	0x40012c00
 8003c74:	40013400 	.word	0x40013400

08003c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e040      	b.n	8003d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fc ff48 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	; 0x24
 8003ca4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0201 	bic.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fb6a 	bl	8004398 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8af 	bl	8003e28 <UART_SetConfig>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e01b      	b.n	8003d0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fbe9 	bl	80044dc <UART_CheckIdleState>
 8003d0a:	4603      	mov	r3, r0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d178      	bne.n	8003e1e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Transmit+0x24>
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e071      	b.n	8003e20 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2221      	movs	r2, #33	; 0x21
 8003d48:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d4a:	f7fd f859 	bl	8000e00 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d68:	d108      	bne.n	8003d7c <HAL_UART_Transmit+0x68>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d104      	bne.n	8003d7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	e003      	b.n	8003d84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d84:	e030      	b.n	8003de8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fc4b 	bl	800462c <UART_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e03c      	b.n	8003e20 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	881a      	ldrh	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db8:	b292      	uxth	r2, r2
 8003dba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e008      	b.n	8003dd6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b292      	uxth	r2, r2
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1c8      	bne.n	8003d86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2140      	movs	r1, #64	; 0x40
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fc14 	bl	800462c <UART_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e005      	b.n	8003e20 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
  }
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e2c:	b08a      	sub	sp, #40	; 0x28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4ba4      	ldr	r3, [pc, #656]	; (80040e8 <UART_SetConfig+0x2c0>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e60:	430b      	orrs	r3, r1
 8003e62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a99      	ldr	r2, [pc, #612]	; (80040ec <UART_SetConfig+0x2c4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d004      	beq.n	8003e94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	4313      	orrs	r3, r2
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a90      	ldr	r2, [pc, #576]	; (80040f0 <UART_SetConfig+0x2c8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d126      	bne.n	8003f00 <UART_SetConfig+0xd8>
 8003eb2:	4b90      	ldr	r3, [pc, #576]	; (80040f4 <UART_SetConfig+0x2cc>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d81b      	bhi.n	8003ef8 <UART_SetConfig+0xd0>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <UART_SetConfig+0xa0>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003ee9 	.word	0x08003ee9
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ef1 	.word	0x08003ef1
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ede:	e116      	b.n	800410e <UART_SetConfig+0x2e6>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e112      	b.n	800410e <UART_SetConfig+0x2e6>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e10e      	b.n	800410e <UART_SetConfig+0x2e6>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef6:	e10a      	b.n	800410e <UART_SetConfig+0x2e6>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	e106      	b.n	800410e <UART_SetConfig+0x2e6>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a7c      	ldr	r2, [pc, #496]	; (80040f8 <UART_SetConfig+0x2d0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d138      	bne.n	8003f7c <UART_SetConfig+0x154>
 8003f0a:	4b7a      	ldr	r3, [pc, #488]	; (80040f4 <UART_SetConfig+0x2cc>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b0c      	cmp	r3, #12
 8003f16:	d82d      	bhi.n	8003f74 <UART_SetConfig+0x14c>
 8003f18:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <UART_SetConfig+0xf8>)
 8003f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1e:	bf00      	nop
 8003f20:	08003f55 	.word	0x08003f55
 8003f24:	08003f75 	.word	0x08003f75
 8003f28:	08003f75 	.word	0x08003f75
 8003f2c:	08003f75 	.word	0x08003f75
 8003f30:	08003f65 	.word	0x08003f65
 8003f34:	08003f75 	.word	0x08003f75
 8003f38:	08003f75 	.word	0x08003f75
 8003f3c:	08003f75 	.word	0x08003f75
 8003f40:	08003f5d 	.word	0x08003f5d
 8003f44:	08003f75 	.word	0x08003f75
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	08003f75 	.word	0x08003f75
 8003f50:	08003f6d 	.word	0x08003f6d
 8003f54:	2300      	movs	r3, #0
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5a:	e0d8      	b.n	800410e <UART_SetConfig+0x2e6>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f62:	e0d4      	b.n	800410e <UART_SetConfig+0x2e6>
 8003f64:	2304      	movs	r3, #4
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6a:	e0d0      	b.n	800410e <UART_SetConfig+0x2e6>
 8003f6c:	2308      	movs	r3, #8
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f72:	e0cc      	b.n	800410e <UART_SetConfig+0x2e6>
 8003f74:	2310      	movs	r3, #16
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e0c8      	b.n	800410e <UART_SetConfig+0x2e6>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a5e      	ldr	r2, [pc, #376]	; (80040fc <UART_SetConfig+0x2d4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d125      	bne.n	8003fd2 <UART_SetConfig+0x1aa>
 8003f86:	4b5b      	ldr	r3, [pc, #364]	; (80040f4 <UART_SetConfig+0x2cc>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f90:	2b30      	cmp	r3, #48	; 0x30
 8003f92:	d016      	beq.n	8003fc2 <UART_SetConfig+0x19a>
 8003f94:	2b30      	cmp	r3, #48	; 0x30
 8003f96:	d818      	bhi.n	8003fca <UART_SetConfig+0x1a2>
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d00a      	beq.n	8003fb2 <UART_SetConfig+0x18a>
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d814      	bhi.n	8003fca <UART_SetConfig+0x1a2>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <UART_SetConfig+0x182>
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d008      	beq.n	8003fba <UART_SetConfig+0x192>
 8003fa8:	e00f      	b.n	8003fca <UART_SetConfig+0x1a2>
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb0:	e0ad      	b.n	800410e <UART_SetConfig+0x2e6>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb8:	e0a9      	b.n	800410e <UART_SetConfig+0x2e6>
 8003fba:	2304      	movs	r3, #4
 8003fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc0:	e0a5      	b.n	800410e <UART_SetConfig+0x2e6>
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc8:	e0a1      	b.n	800410e <UART_SetConfig+0x2e6>
 8003fca:	2310      	movs	r3, #16
 8003fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd0:	e09d      	b.n	800410e <UART_SetConfig+0x2e6>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a4a      	ldr	r2, [pc, #296]	; (8004100 <UART_SetConfig+0x2d8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d125      	bne.n	8004028 <UART_SetConfig+0x200>
 8003fdc:	4b45      	ldr	r3, [pc, #276]	; (80040f4 <UART_SetConfig+0x2cc>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8003fe8:	d016      	beq.n	8004018 <UART_SetConfig+0x1f0>
 8003fea:	2bc0      	cmp	r3, #192	; 0xc0
 8003fec:	d818      	bhi.n	8004020 <UART_SetConfig+0x1f8>
 8003fee:	2b80      	cmp	r3, #128	; 0x80
 8003ff0:	d00a      	beq.n	8004008 <UART_SetConfig+0x1e0>
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	d814      	bhi.n	8004020 <UART_SetConfig+0x1f8>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <UART_SetConfig+0x1d8>
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d008      	beq.n	8004010 <UART_SetConfig+0x1e8>
 8003ffe:	e00f      	b.n	8004020 <UART_SetConfig+0x1f8>
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004006:	e082      	b.n	800410e <UART_SetConfig+0x2e6>
 8004008:	2302      	movs	r3, #2
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400e:	e07e      	b.n	800410e <UART_SetConfig+0x2e6>
 8004010:	2304      	movs	r3, #4
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004016:	e07a      	b.n	800410e <UART_SetConfig+0x2e6>
 8004018:	2308      	movs	r3, #8
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401e:	e076      	b.n	800410e <UART_SetConfig+0x2e6>
 8004020:	2310      	movs	r3, #16
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004026:	e072      	b.n	800410e <UART_SetConfig+0x2e6>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a35      	ldr	r2, [pc, #212]	; (8004104 <UART_SetConfig+0x2dc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d12a      	bne.n	8004088 <UART_SetConfig+0x260>
 8004032:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <UART_SetConfig+0x2cc>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004040:	d01a      	beq.n	8004078 <UART_SetConfig+0x250>
 8004042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004046:	d81b      	bhi.n	8004080 <UART_SetConfig+0x258>
 8004048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800404c:	d00c      	beq.n	8004068 <UART_SetConfig+0x240>
 800404e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004052:	d815      	bhi.n	8004080 <UART_SetConfig+0x258>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <UART_SetConfig+0x238>
 8004058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405c:	d008      	beq.n	8004070 <UART_SetConfig+0x248>
 800405e:	e00f      	b.n	8004080 <UART_SetConfig+0x258>
 8004060:	2300      	movs	r3, #0
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004066:	e052      	b.n	800410e <UART_SetConfig+0x2e6>
 8004068:	2302      	movs	r3, #2
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e04e      	b.n	800410e <UART_SetConfig+0x2e6>
 8004070:	2304      	movs	r3, #4
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004076:	e04a      	b.n	800410e <UART_SetConfig+0x2e6>
 8004078:	2308      	movs	r3, #8
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407e:	e046      	b.n	800410e <UART_SetConfig+0x2e6>
 8004080:	2310      	movs	r3, #16
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004086:	e042      	b.n	800410e <UART_SetConfig+0x2e6>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a17      	ldr	r2, [pc, #92]	; (80040ec <UART_SetConfig+0x2c4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d13a      	bne.n	8004108 <UART_SetConfig+0x2e0>
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <UART_SetConfig+0x2cc>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800409c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040a0:	d01a      	beq.n	80040d8 <UART_SetConfig+0x2b0>
 80040a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040a6:	d81b      	bhi.n	80040e0 <UART_SetConfig+0x2b8>
 80040a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ac:	d00c      	beq.n	80040c8 <UART_SetConfig+0x2a0>
 80040ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b2:	d815      	bhi.n	80040e0 <UART_SetConfig+0x2b8>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <UART_SetConfig+0x298>
 80040b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040bc:	d008      	beq.n	80040d0 <UART_SetConfig+0x2a8>
 80040be:	e00f      	b.n	80040e0 <UART_SetConfig+0x2b8>
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c6:	e022      	b.n	800410e <UART_SetConfig+0x2e6>
 80040c8:	2302      	movs	r3, #2
 80040ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ce:	e01e      	b.n	800410e <UART_SetConfig+0x2e6>
 80040d0:	2304      	movs	r3, #4
 80040d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d6:	e01a      	b.n	800410e <UART_SetConfig+0x2e6>
 80040d8:	2308      	movs	r3, #8
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040de:	e016      	b.n	800410e <UART_SetConfig+0x2e6>
 80040e0:	2310      	movs	r3, #16
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e6:	e012      	b.n	800410e <UART_SetConfig+0x2e6>
 80040e8:	efff69f3 	.word	0xefff69f3
 80040ec:	40008000 	.word	0x40008000
 80040f0:	40013800 	.word	0x40013800
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40004400 	.word	0x40004400
 80040fc:	40004800 	.word	0x40004800
 8004100:	40004c00 	.word	0x40004c00
 8004104:	40005000 	.word	0x40005000
 8004108:	2310      	movs	r3, #16
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a9f      	ldr	r2, [pc, #636]	; (8004390 <UART_SetConfig+0x568>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d17a      	bne.n	800420e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800411c:	2b08      	cmp	r3, #8
 800411e:	d824      	bhi.n	800416a <UART_SetConfig+0x342>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x300>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	0800414d 	.word	0x0800414d
 800412c:	0800416b 	.word	0x0800416b
 8004130:	08004155 	.word	0x08004155
 8004134:	0800416b 	.word	0x0800416b
 8004138:	0800415b 	.word	0x0800415b
 800413c:	0800416b 	.word	0x0800416b
 8004140:	0800416b 	.word	0x0800416b
 8004144:	0800416b 	.word	0x0800416b
 8004148:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800414c:	f7fd ff08 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 8004150:	61f8      	str	r0, [r7, #28]
        break;
 8004152:	e010      	b.n	8004176 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b8f      	ldr	r3, [pc, #572]	; (8004394 <UART_SetConfig+0x56c>)
 8004156:	61fb      	str	r3, [r7, #28]
        break;
 8004158:	e00d      	b.n	8004176 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fd fe69 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 800415e:	61f8      	str	r0, [r7, #28]
        break;
 8004160:	e009      	b.n	8004176 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004166:	61fb      	str	r3, [r7, #28]
        break;
 8004168:	e005      	b.n	8004176 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004174:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80fb 	beq.w	8004374 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	429a      	cmp	r2, r3
 800418c:	d305      	bcc.n	800419a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	429a      	cmp	r2, r3
 8004198:	d903      	bls.n	80041a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041a0:	e0e8      	b.n	8004374 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	2200      	movs	r2, #0
 80041a6:	461c      	mov	r4, r3
 80041a8:	4615      	mov	r5, r2
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	022b      	lsls	r3, r5, #8
 80041b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80041b8:	0222      	lsls	r2, r4, #8
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	6849      	ldr	r1, [r1, #4]
 80041be:	0849      	lsrs	r1, r1, #1
 80041c0:	2000      	movs	r0, #0
 80041c2:	4688      	mov	r8, r1
 80041c4:	4681      	mov	r9, r0
 80041c6:	eb12 0a08 	adds.w	sl, r2, r8
 80041ca:	eb43 0b09 	adc.w	fp, r3, r9
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041dc:	4650      	mov	r0, sl
 80041de:	4659      	mov	r1, fp
 80041e0:	f7fc f846 	bl	8000270 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4613      	mov	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f2:	d308      	bcc.n	8004206 <UART_SetConfig+0x3de>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fa:	d204      	bcs.n	8004206 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	60da      	str	r2, [r3, #12]
 8004204:	e0b6      	b.n	8004374 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800420c:	e0b2      	b.n	8004374 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004216:	d15e      	bne.n	80042d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800421c:	2b08      	cmp	r3, #8
 800421e:	d828      	bhi.n	8004272 <UART_SetConfig+0x44a>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0x400>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800424d 	.word	0x0800424d
 800422c:	08004255 	.word	0x08004255
 8004230:	0800425d 	.word	0x0800425d
 8004234:	08004273 	.word	0x08004273
 8004238:	08004263 	.word	0x08004263
 800423c:	08004273 	.word	0x08004273
 8004240:	08004273 	.word	0x08004273
 8004244:	08004273 	.word	0x08004273
 8004248:	0800426b 	.word	0x0800426b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7fd fe88 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 8004250:	61f8      	str	r0, [r7, #28]
        break;
 8004252:	e014      	b.n	800427e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004254:	f7fd fe9a 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 8004258:	61f8      	str	r0, [r7, #28]
        break;
 800425a:	e010      	b.n	800427e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800425c:	4b4d      	ldr	r3, [pc, #308]	; (8004394 <UART_SetConfig+0x56c>)
 800425e:	61fb      	str	r3, [r7, #28]
        break;
 8004260:	e00d      	b.n	800427e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004262:	f7fd fde5 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8004266:	61f8      	str	r0, [r7, #28]
        break;
 8004268:	e009      	b.n	800427e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800426a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426e:	61fb      	str	r3, [r7, #28]
        break;
 8004270:	e005      	b.n	800427e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800427c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d077      	beq.n	8004374 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005a      	lsls	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	441a      	add	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b0f      	cmp	r3, #15
 800429e:	d916      	bls.n	80042ce <UART_SetConfig+0x4a6>
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d212      	bcs.n	80042ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f023 030f 	bic.w	r3, r3, #15
 80042b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	b29a      	uxth	r2, r3
 80042be:	8afb      	ldrh	r3, [r7, #22]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	8afa      	ldrh	r2, [r7, #22]
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	e052      	b.n	8004374 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042d4:	e04e      	b.n	8004374 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d827      	bhi.n	800432e <UART_SetConfig+0x506>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <UART_SetConfig+0x4bc>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004311 	.word	0x08004311
 80042ec:	08004319 	.word	0x08004319
 80042f0:	0800432f 	.word	0x0800432f
 80042f4:	0800431f 	.word	0x0800431f
 80042f8:	0800432f 	.word	0x0800432f
 80042fc:	0800432f 	.word	0x0800432f
 8004300:	0800432f 	.word	0x0800432f
 8004304:	08004327 	.word	0x08004327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004308:	f7fd fe2a 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 800430c:	61f8      	str	r0, [r7, #28]
        break;
 800430e:	e014      	b.n	800433a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004310:	f7fd fe3c 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 8004314:	61f8      	str	r0, [r7, #28]
        break;
 8004316:	e010      	b.n	800433a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004318:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <UART_SetConfig+0x56c>)
 800431a:	61fb      	str	r3, [r7, #28]
        break;
 800431c:	e00d      	b.n	800433a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431e:	f7fd fd87 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8004322:	61f8      	str	r0, [r7, #28]
        break;
 8004324:	e009      	b.n	800433a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432a:	61fb      	str	r3, [r7, #28]
        break;
 800432c:	e005      	b.n	800433a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004338:	bf00      	nop
    }

    if (pclk != 0U)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d019      	beq.n	8004374 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	085a      	lsrs	r2, r3, #1
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	441a      	add	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b0f      	cmp	r3, #15
 8004358:	d909      	bls.n	800436e <UART_SetConfig+0x546>
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004360:	d205      	bcs.n	800436e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e002      	b.n	8004374 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004380:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004384:	4618      	mov	r0, r3
 8004386:	3728      	adds	r7, #40	; 0x28
 8004388:	46bd      	mov	sp, r7
 800438a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438e:	bf00      	nop
 8004390:	40008000 	.word	0x40008000
 8004394:	00f42400 	.word	0x00f42400

08004398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01a      	beq.n	80044ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004496:	d10a      	bne.n	80044ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]
  }
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b098      	sub	sp, #96	; 0x60
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044ec:	f7fc fc88 	bl	8000e00 <HAL_GetTick>
 80044f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d12e      	bne.n	800455e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004508:	2200      	movs	r2, #0
 800450a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f88c 	bl	800462c <UART_WaitOnFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d021      	beq.n	800455e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452e:	653b      	str	r3, [r7, #80]	; 0x50
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004538:	647b      	str	r3, [r7, #68]	; 0x44
 800453a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800453e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e062      	b.n	8004624 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b04      	cmp	r3, #4
 800456a:	d149      	bne.n	8004600 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800456c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004574:	2200      	movs	r2, #0
 8004576:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f856 	bl	800462c <UART_WaitOnFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d03c      	beq.n	8004600 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	623b      	str	r3, [r7, #32]
   return(result);
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800459a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30
 80045a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3308      	adds	r3, #8
 80045be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3308      	adds	r3, #8
 80045d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d8:	61fa      	str	r2, [r7, #28]
 80045da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	69b9      	ldr	r1, [r7, #24]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	617b      	str	r3, [r7, #20]
   return(result);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e5      	bne.n	80045b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e011      	b.n	8004624 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3758      	adds	r7, #88	; 0x58
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463c:	e049      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d045      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fc fbdb 	bl	8000e00 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <UART_WaitOnFlagUntilTimeout+0x30>
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e048      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d031      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b08      	cmp	r3, #8
 800467a:	d110      	bne.n	800469e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2208      	movs	r2, #8
 8004682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f838 	bl	80046fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2208      	movs	r2, #8
 800468e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e029      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ac:	d111      	bne.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f81e 	bl	80046fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e00f      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69da      	ldr	r2, [r3, #28]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4013      	ands	r3, r2
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d0a6      	beq.n	800463e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b095      	sub	sp, #84	; 0x54
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004720:	643b      	str	r3, [r7, #64]	; 0x40
 8004722:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e6      	bne.n	8004702 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	61fb      	str	r3, [r7, #28]
   return(result);
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	64bb      	str	r3, [r7, #72]	; 0x48
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3308      	adds	r3, #8
 8004752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004754:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e5      	bne.n	8004734 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476c:	2b01      	cmp	r3, #1
 800476e:	d118      	bne.n	80047a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	60bb      	str	r3, [r7, #8]
   return(result);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f023 0310 	bic.w	r3, r3, #16
 8004784:	647b      	str	r3, [r7, #68]	; 0x44
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	6979      	ldr	r1, [r7, #20]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	613b      	str	r3, [r7, #16]
   return(result);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e6      	bne.n	8004770 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80047b6:	bf00      	nop
 80047b8:	3754      	adds	r7, #84	; 0x54
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <siprintf>:
 80047c4:	b40e      	push	{r1, r2, r3}
 80047c6:	b500      	push	{lr}
 80047c8:	b09c      	sub	sp, #112	; 0x70
 80047ca:	ab1d      	add	r3, sp, #116	; 0x74
 80047cc:	9002      	str	r0, [sp, #8]
 80047ce:	9006      	str	r0, [sp, #24]
 80047d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047d4:	4809      	ldr	r0, [pc, #36]	; (80047fc <siprintf+0x38>)
 80047d6:	9107      	str	r1, [sp, #28]
 80047d8:	9104      	str	r1, [sp, #16]
 80047da:	4909      	ldr	r1, [pc, #36]	; (8004800 <siprintf+0x3c>)
 80047dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047e0:	9105      	str	r1, [sp, #20]
 80047e2:	6800      	ldr	r0, [r0, #0]
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	a902      	add	r1, sp, #8
 80047e8:	f000 f992 	bl	8004b10 <_svfiprintf_r>
 80047ec:	9b02      	ldr	r3, [sp, #8]
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	b01c      	add	sp, #112	; 0x70
 80047f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047f8:	b003      	add	sp, #12
 80047fa:	4770      	bx	lr
 80047fc:	20000058 	.word	0x20000058
 8004800:	ffff0208 	.word	0xffff0208

08004804 <memset>:
 8004804:	4402      	add	r2, r0
 8004806:	4603      	mov	r3, r0
 8004808:	4293      	cmp	r3, r2
 800480a:	d100      	bne.n	800480e <memset+0xa>
 800480c:	4770      	bx	lr
 800480e:	f803 1b01 	strb.w	r1, [r3], #1
 8004812:	e7f9      	b.n	8004808 <memset+0x4>

08004814 <__errno>:
 8004814:	4b01      	ldr	r3, [pc, #4]	; (800481c <__errno+0x8>)
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000058 	.word	0x20000058

08004820 <__libc_init_array>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	4d0d      	ldr	r5, [pc, #52]	; (8004858 <__libc_init_array+0x38>)
 8004824:	4c0d      	ldr	r4, [pc, #52]	; (800485c <__libc_init_array+0x3c>)
 8004826:	1b64      	subs	r4, r4, r5
 8004828:	10a4      	asrs	r4, r4, #2
 800482a:	2600      	movs	r6, #0
 800482c:	42a6      	cmp	r6, r4
 800482e:	d109      	bne.n	8004844 <__libc_init_array+0x24>
 8004830:	4d0b      	ldr	r5, [pc, #44]	; (8004860 <__libc_init_array+0x40>)
 8004832:	4c0c      	ldr	r4, [pc, #48]	; (8004864 <__libc_init_array+0x44>)
 8004834:	f000 fc6a 	bl	800510c <_init>
 8004838:	1b64      	subs	r4, r4, r5
 800483a:	10a4      	asrs	r4, r4, #2
 800483c:	2600      	movs	r6, #0
 800483e:	42a6      	cmp	r6, r4
 8004840:	d105      	bne.n	800484e <__libc_init_array+0x2e>
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	f855 3b04 	ldr.w	r3, [r5], #4
 8004848:	4798      	blx	r3
 800484a:	3601      	adds	r6, #1
 800484c:	e7ee      	b.n	800482c <__libc_init_array+0xc>
 800484e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004852:	4798      	blx	r3
 8004854:	3601      	adds	r6, #1
 8004856:	e7f2      	b.n	800483e <__libc_init_array+0x1e>
 8004858:	080051b4 	.word	0x080051b4
 800485c:	080051b4 	.word	0x080051b4
 8004860:	080051b4 	.word	0x080051b4
 8004864:	080051b8 	.word	0x080051b8

08004868 <__retarget_lock_acquire_recursive>:
 8004868:	4770      	bx	lr

0800486a <__retarget_lock_release_recursive>:
 800486a:	4770      	bx	lr

0800486c <_free_r>:
 800486c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800486e:	2900      	cmp	r1, #0
 8004870:	d044      	beq.n	80048fc <_free_r+0x90>
 8004872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004876:	9001      	str	r0, [sp, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f1a1 0404 	sub.w	r4, r1, #4
 800487e:	bfb8      	it	lt
 8004880:	18e4      	addlt	r4, r4, r3
 8004882:	f000 f8df 	bl	8004a44 <__malloc_lock>
 8004886:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <_free_r+0x94>)
 8004888:	9801      	ldr	r0, [sp, #4]
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	b933      	cbnz	r3, 800489c <_free_r+0x30>
 800488e:	6063      	str	r3, [r4, #4]
 8004890:	6014      	str	r4, [r2, #0]
 8004892:	b003      	add	sp, #12
 8004894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004898:	f000 b8da 	b.w	8004a50 <__malloc_unlock>
 800489c:	42a3      	cmp	r3, r4
 800489e:	d908      	bls.n	80048b2 <_free_r+0x46>
 80048a0:	6825      	ldr	r5, [r4, #0]
 80048a2:	1961      	adds	r1, r4, r5
 80048a4:	428b      	cmp	r3, r1
 80048a6:	bf01      	itttt	eq
 80048a8:	6819      	ldreq	r1, [r3, #0]
 80048aa:	685b      	ldreq	r3, [r3, #4]
 80048ac:	1949      	addeq	r1, r1, r5
 80048ae:	6021      	streq	r1, [r4, #0]
 80048b0:	e7ed      	b.n	800488e <_free_r+0x22>
 80048b2:	461a      	mov	r2, r3
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	b10b      	cbz	r3, 80048bc <_free_r+0x50>
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	d9fa      	bls.n	80048b2 <_free_r+0x46>
 80048bc:	6811      	ldr	r1, [r2, #0]
 80048be:	1855      	adds	r5, r2, r1
 80048c0:	42a5      	cmp	r5, r4
 80048c2:	d10b      	bne.n	80048dc <_free_r+0x70>
 80048c4:	6824      	ldr	r4, [r4, #0]
 80048c6:	4421      	add	r1, r4
 80048c8:	1854      	adds	r4, r2, r1
 80048ca:	42a3      	cmp	r3, r4
 80048cc:	6011      	str	r1, [r2, #0]
 80048ce:	d1e0      	bne.n	8004892 <_free_r+0x26>
 80048d0:	681c      	ldr	r4, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	6053      	str	r3, [r2, #4]
 80048d6:	440c      	add	r4, r1
 80048d8:	6014      	str	r4, [r2, #0]
 80048da:	e7da      	b.n	8004892 <_free_r+0x26>
 80048dc:	d902      	bls.n	80048e4 <_free_r+0x78>
 80048de:	230c      	movs	r3, #12
 80048e0:	6003      	str	r3, [r0, #0]
 80048e2:	e7d6      	b.n	8004892 <_free_r+0x26>
 80048e4:	6825      	ldr	r5, [r4, #0]
 80048e6:	1961      	adds	r1, r4, r5
 80048e8:	428b      	cmp	r3, r1
 80048ea:	bf04      	itt	eq
 80048ec:	6819      	ldreq	r1, [r3, #0]
 80048ee:	685b      	ldreq	r3, [r3, #4]
 80048f0:	6063      	str	r3, [r4, #4]
 80048f2:	bf04      	itt	eq
 80048f4:	1949      	addeq	r1, r1, r5
 80048f6:	6021      	streq	r1, [r4, #0]
 80048f8:	6054      	str	r4, [r2, #4]
 80048fa:	e7ca      	b.n	8004892 <_free_r+0x26>
 80048fc:	b003      	add	sp, #12
 80048fe:	bd30      	pop	{r4, r5, pc}
 8004900:	200002f4 	.word	0x200002f4

08004904 <sbrk_aligned>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	4e0e      	ldr	r6, [pc, #56]	; (8004940 <sbrk_aligned+0x3c>)
 8004908:	460c      	mov	r4, r1
 800490a:	6831      	ldr	r1, [r6, #0]
 800490c:	4605      	mov	r5, r0
 800490e:	b911      	cbnz	r1, 8004916 <sbrk_aligned+0x12>
 8004910:	f000 fba6 	bl	8005060 <_sbrk_r>
 8004914:	6030      	str	r0, [r6, #0]
 8004916:	4621      	mov	r1, r4
 8004918:	4628      	mov	r0, r5
 800491a:	f000 fba1 	bl	8005060 <_sbrk_r>
 800491e:	1c43      	adds	r3, r0, #1
 8004920:	d00a      	beq.n	8004938 <sbrk_aligned+0x34>
 8004922:	1cc4      	adds	r4, r0, #3
 8004924:	f024 0403 	bic.w	r4, r4, #3
 8004928:	42a0      	cmp	r0, r4
 800492a:	d007      	beq.n	800493c <sbrk_aligned+0x38>
 800492c:	1a21      	subs	r1, r4, r0
 800492e:	4628      	mov	r0, r5
 8004930:	f000 fb96 	bl	8005060 <_sbrk_r>
 8004934:	3001      	adds	r0, #1
 8004936:	d101      	bne.n	800493c <sbrk_aligned+0x38>
 8004938:	f04f 34ff 	mov.w	r4, #4294967295
 800493c:	4620      	mov	r0, r4
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	200002f8 	.word	0x200002f8

08004944 <_malloc_r>:
 8004944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004948:	1ccd      	adds	r5, r1, #3
 800494a:	f025 0503 	bic.w	r5, r5, #3
 800494e:	3508      	adds	r5, #8
 8004950:	2d0c      	cmp	r5, #12
 8004952:	bf38      	it	cc
 8004954:	250c      	movcc	r5, #12
 8004956:	2d00      	cmp	r5, #0
 8004958:	4607      	mov	r7, r0
 800495a:	db01      	blt.n	8004960 <_malloc_r+0x1c>
 800495c:	42a9      	cmp	r1, r5
 800495e:	d905      	bls.n	800496c <_malloc_r+0x28>
 8004960:	230c      	movs	r3, #12
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	2600      	movs	r6, #0
 8004966:	4630      	mov	r0, r6
 8004968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800496c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a40 <_malloc_r+0xfc>
 8004970:	f000 f868 	bl	8004a44 <__malloc_lock>
 8004974:	f8d8 3000 	ldr.w	r3, [r8]
 8004978:	461c      	mov	r4, r3
 800497a:	bb5c      	cbnz	r4, 80049d4 <_malloc_r+0x90>
 800497c:	4629      	mov	r1, r5
 800497e:	4638      	mov	r0, r7
 8004980:	f7ff ffc0 	bl	8004904 <sbrk_aligned>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	4604      	mov	r4, r0
 8004988:	d155      	bne.n	8004a36 <_malloc_r+0xf2>
 800498a:	f8d8 4000 	ldr.w	r4, [r8]
 800498e:	4626      	mov	r6, r4
 8004990:	2e00      	cmp	r6, #0
 8004992:	d145      	bne.n	8004a20 <_malloc_r+0xdc>
 8004994:	2c00      	cmp	r4, #0
 8004996:	d048      	beq.n	8004a2a <_malloc_r+0xe6>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	4631      	mov	r1, r6
 800499c:	4638      	mov	r0, r7
 800499e:	eb04 0903 	add.w	r9, r4, r3
 80049a2:	f000 fb5d 	bl	8005060 <_sbrk_r>
 80049a6:	4581      	cmp	r9, r0
 80049a8:	d13f      	bne.n	8004a2a <_malloc_r+0xe6>
 80049aa:	6821      	ldr	r1, [r4, #0]
 80049ac:	1a6d      	subs	r5, r5, r1
 80049ae:	4629      	mov	r1, r5
 80049b0:	4638      	mov	r0, r7
 80049b2:	f7ff ffa7 	bl	8004904 <sbrk_aligned>
 80049b6:	3001      	adds	r0, #1
 80049b8:	d037      	beq.n	8004a2a <_malloc_r+0xe6>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	442b      	add	r3, r5
 80049be:	6023      	str	r3, [r4, #0]
 80049c0:	f8d8 3000 	ldr.w	r3, [r8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d038      	beq.n	8004a3a <_malloc_r+0xf6>
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	42a2      	cmp	r2, r4
 80049cc:	d12b      	bne.n	8004a26 <_malloc_r+0xe2>
 80049ce:	2200      	movs	r2, #0
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	e00f      	b.n	80049f4 <_malloc_r+0xb0>
 80049d4:	6822      	ldr	r2, [r4, #0]
 80049d6:	1b52      	subs	r2, r2, r5
 80049d8:	d41f      	bmi.n	8004a1a <_malloc_r+0xd6>
 80049da:	2a0b      	cmp	r2, #11
 80049dc:	d917      	bls.n	8004a0e <_malloc_r+0xca>
 80049de:	1961      	adds	r1, r4, r5
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	6025      	str	r5, [r4, #0]
 80049e4:	bf18      	it	ne
 80049e6:	6059      	strne	r1, [r3, #4]
 80049e8:	6863      	ldr	r3, [r4, #4]
 80049ea:	bf08      	it	eq
 80049ec:	f8c8 1000 	streq.w	r1, [r8]
 80049f0:	5162      	str	r2, [r4, r5]
 80049f2:	604b      	str	r3, [r1, #4]
 80049f4:	4638      	mov	r0, r7
 80049f6:	f104 060b 	add.w	r6, r4, #11
 80049fa:	f000 f829 	bl	8004a50 <__malloc_unlock>
 80049fe:	f026 0607 	bic.w	r6, r6, #7
 8004a02:	1d23      	adds	r3, r4, #4
 8004a04:	1af2      	subs	r2, r6, r3
 8004a06:	d0ae      	beq.n	8004966 <_malloc_r+0x22>
 8004a08:	1b9b      	subs	r3, r3, r6
 8004a0a:	50a3      	str	r3, [r4, r2]
 8004a0c:	e7ab      	b.n	8004966 <_malloc_r+0x22>
 8004a0e:	42a3      	cmp	r3, r4
 8004a10:	6862      	ldr	r2, [r4, #4]
 8004a12:	d1dd      	bne.n	80049d0 <_malloc_r+0x8c>
 8004a14:	f8c8 2000 	str.w	r2, [r8]
 8004a18:	e7ec      	b.n	80049f4 <_malloc_r+0xb0>
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	6864      	ldr	r4, [r4, #4]
 8004a1e:	e7ac      	b.n	800497a <_malloc_r+0x36>
 8004a20:	4634      	mov	r4, r6
 8004a22:	6876      	ldr	r6, [r6, #4]
 8004a24:	e7b4      	b.n	8004990 <_malloc_r+0x4c>
 8004a26:	4613      	mov	r3, r2
 8004a28:	e7cc      	b.n	80049c4 <_malloc_r+0x80>
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f000 f80e 	bl	8004a50 <__malloc_unlock>
 8004a34:	e797      	b.n	8004966 <_malloc_r+0x22>
 8004a36:	6025      	str	r5, [r4, #0]
 8004a38:	e7dc      	b.n	80049f4 <_malloc_r+0xb0>
 8004a3a:	605b      	str	r3, [r3, #4]
 8004a3c:	deff      	udf	#255	; 0xff
 8004a3e:	bf00      	nop
 8004a40:	200002f4 	.word	0x200002f4

08004a44 <__malloc_lock>:
 8004a44:	4801      	ldr	r0, [pc, #4]	; (8004a4c <__malloc_lock+0x8>)
 8004a46:	f7ff bf0f 	b.w	8004868 <__retarget_lock_acquire_recursive>
 8004a4a:	bf00      	nop
 8004a4c:	200002f0 	.word	0x200002f0

08004a50 <__malloc_unlock>:
 8004a50:	4801      	ldr	r0, [pc, #4]	; (8004a58 <__malloc_unlock+0x8>)
 8004a52:	f7ff bf0a 	b.w	800486a <__retarget_lock_release_recursive>
 8004a56:	bf00      	nop
 8004a58:	200002f0 	.word	0x200002f0

08004a5c <__ssputs_r>:
 8004a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a60:	688e      	ldr	r6, [r1, #8]
 8004a62:	461f      	mov	r7, r3
 8004a64:	42be      	cmp	r6, r7
 8004a66:	680b      	ldr	r3, [r1, #0]
 8004a68:	4682      	mov	sl, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	4690      	mov	r8, r2
 8004a6e:	d82c      	bhi.n	8004aca <__ssputs_r+0x6e>
 8004a70:	898a      	ldrh	r2, [r1, #12]
 8004a72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a76:	d026      	beq.n	8004ac6 <__ssputs_r+0x6a>
 8004a78:	6965      	ldr	r5, [r4, #20]
 8004a7a:	6909      	ldr	r1, [r1, #16]
 8004a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a80:	eba3 0901 	sub.w	r9, r3, r1
 8004a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a88:	1c7b      	adds	r3, r7, #1
 8004a8a:	444b      	add	r3, r9
 8004a8c:	106d      	asrs	r5, r5, #1
 8004a8e:	429d      	cmp	r5, r3
 8004a90:	bf38      	it	cc
 8004a92:	461d      	movcc	r5, r3
 8004a94:	0553      	lsls	r3, r2, #21
 8004a96:	d527      	bpl.n	8004ae8 <__ssputs_r+0x8c>
 8004a98:	4629      	mov	r1, r5
 8004a9a:	f7ff ff53 	bl	8004944 <_malloc_r>
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	b360      	cbz	r0, 8004afc <__ssputs_r+0xa0>
 8004aa2:	6921      	ldr	r1, [r4, #16]
 8004aa4:	464a      	mov	r2, r9
 8004aa6:	f000 faeb 	bl	8005080 <memcpy>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	6126      	str	r6, [r4, #16]
 8004ab8:	6165      	str	r5, [r4, #20]
 8004aba:	444e      	add	r6, r9
 8004abc:	eba5 0509 	sub.w	r5, r5, r9
 8004ac0:	6026      	str	r6, [r4, #0]
 8004ac2:	60a5      	str	r5, [r4, #8]
 8004ac4:	463e      	mov	r6, r7
 8004ac6:	42be      	cmp	r6, r7
 8004ac8:	d900      	bls.n	8004acc <__ssputs_r+0x70>
 8004aca:	463e      	mov	r6, r7
 8004acc:	6820      	ldr	r0, [r4, #0]
 8004ace:	4632      	mov	r2, r6
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	f000 faab 	bl	800502c <memmove>
 8004ad6:	68a3      	ldr	r3, [r4, #8]
 8004ad8:	1b9b      	subs	r3, r3, r6
 8004ada:	60a3      	str	r3, [r4, #8]
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	4433      	add	r3, r6
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae8:	462a      	mov	r2, r5
 8004aea:	f000 fad7 	bl	800509c <_realloc_r>
 8004aee:	4606      	mov	r6, r0
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d1e0      	bne.n	8004ab6 <__ssputs_r+0x5a>
 8004af4:	6921      	ldr	r1, [r4, #16]
 8004af6:	4650      	mov	r0, sl
 8004af8:	f7ff feb8 	bl	800486c <_free_r>
 8004afc:	230c      	movs	r3, #12
 8004afe:	f8ca 3000 	str.w	r3, [sl]
 8004b02:	89a3      	ldrh	r3, [r4, #12]
 8004b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b08:	81a3      	strh	r3, [r4, #12]
 8004b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0e:	e7e9      	b.n	8004ae4 <__ssputs_r+0x88>

08004b10 <_svfiprintf_r>:
 8004b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b14:	4698      	mov	r8, r3
 8004b16:	898b      	ldrh	r3, [r1, #12]
 8004b18:	061b      	lsls	r3, r3, #24
 8004b1a:	b09d      	sub	sp, #116	; 0x74
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	460d      	mov	r5, r1
 8004b20:	4614      	mov	r4, r2
 8004b22:	d50e      	bpl.n	8004b42 <_svfiprintf_r+0x32>
 8004b24:	690b      	ldr	r3, [r1, #16]
 8004b26:	b963      	cbnz	r3, 8004b42 <_svfiprintf_r+0x32>
 8004b28:	2140      	movs	r1, #64	; 0x40
 8004b2a:	f7ff ff0b 	bl	8004944 <_malloc_r>
 8004b2e:	6028      	str	r0, [r5, #0]
 8004b30:	6128      	str	r0, [r5, #16]
 8004b32:	b920      	cbnz	r0, 8004b3e <_svfiprintf_r+0x2e>
 8004b34:	230c      	movs	r3, #12
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	e0d0      	b.n	8004ce0 <_svfiprintf_r+0x1d0>
 8004b3e:	2340      	movs	r3, #64	; 0x40
 8004b40:	616b      	str	r3, [r5, #20]
 8004b42:	2300      	movs	r3, #0
 8004b44:	9309      	str	r3, [sp, #36]	; 0x24
 8004b46:	2320      	movs	r3, #32
 8004b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b50:	2330      	movs	r3, #48	; 0x30
 8004b52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004cf8 <_svfiprintf_r+0x1e8>
 8004b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b5a:	f04f 0901 	mov.w	r9, #1
 8004b5e:	4623      	mov	r3, r4
 8004b60:	469a      	mov	sl, r3
 8004b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b66:	b10a      	cbz	r2, 8004b6c <_svfiprintf_r+0x5c>
 8004b68:	2a25      	cmp	r2, #37	; 0x25
 8004b6a:	d1f9      	bne.n	8004b60 <_svfiprintf_r+0x50>
 8004b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004b70:	d00b      	beq.n	8004b8a <_svfiprintf_r+0x7a>
 8004b72:	465b      	mov	r3, fp
 8004b74:	4622      	mov	r2, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	4638      	mov	r0, r7
 8004b7a:	f7ff ff6f 	bl	8004a5c <__ssputs_r>
 8004b7e:	3001      	adds	r0, #1
 8004b80:	f000 80a9 	beq.w	8004cd6 <_svfiprintf_r+0x1c6>
 8004b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b86:	445a      	add	r2, fp
 8004b88:	9209      	str	r2, [sp, #36]	; 0x24
 8004b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80a1 	beq.w	8004cd6 <_svfiprintf_r+0x1c6>
 8004b94:	2300      	movs	r3, #0
 8004b96:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b9e:	f10a 0a01 	add.w	sl, sl, #1
 8004ba2:	9304      	str	r3, [sp, #16]
 8004ba4:	9307      	str	r3, [sp, #28]
 8004ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004baa:	931a      	str	r3, [sp, #104]	; 0x68
 8004bac:	4654      	mov	r4, sl
 8004bae:	2205      	movs	r2, #5
 8004bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb4:	4850      	ldr	r0, [pc, #320]	; (8004cf8 <_svfiprintf_r+0x1e8>)
 8004bb6:	f7fb fb0b 	bl	80001d0 <memchr>
 8004bba:	9a04      	ldr	r2, [sp, #16]
 8004bbc:	b9d8      	cbnz	r0, 8004bf6 <_svfiprintf_r+0xe6>
 8004bbe:	06d0      	lsls	r0, r2, #27
 8004bc0:	bf44      	itt	mi
 8004bc2:	2320      	movmi	r3, #32
 8004bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc8:	0711      	lsls	r1, r2, #28
 8004bca:	bf44      	itt	mi
 8004bcc:	232b      	movmi	r3, #43	; 0x2b
 8004bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd8:	d015      	beq.n	8004c06 <_svfiprintf_r+0xf6>
 8004bda:	9a07      	ldr	r2, [sp, #28]
 8004bdc:	4654      	mov	r4, sl
 8004bde:	2000      	movs	r0, #0
 8004be0:	f04f 0c0a 	mov.w	ip, #10
 8004be4:	4621      	mov	r1, r4
 8004be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bea:	3b30      	subs	r3, #48	; 0x30
 8004bec:	2b09      	cmp	r3, #9
 8004bee:	d94d      	bls.n	8004c8c <_svfiprintf_r+0x17c>
 8004bf0:	b1b0      	cbz	r0, 8004c20 <_svfiprintf_r+0x110>
 8004bf2:	9207      	str	r2, [sp, #28]
 8004bf4:	e014      	b.n	8004c20 <_svfiprintf_r+0x110>
 8004bf6:	eba0 0308 	sub.w	r3, r0, r8
 8004bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	9304      	str	r3, [sp, #16]
 8004c02:	46a2      	mov	sl, r4
 8004c04:	e7d2      	b.n	8004bac <_svfiprintf_r+0x9c>
 8004c06:	9b03      	ldr	r3, [sp, #12]
 8004c08:	1d19      	adds	r1, r3, #4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	9103      	str	r1, [sp, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bfbb      	ittet	lt
 8004c12:	425b      	neglt	r3, r3
 8004c14:	f042 0202 	orrlt.w	r2, r2, #2
 8004c18:	9307      	strge	r3, [sp, #28]
 8004c1a:	9307      	strlt	r3, [sp, #28]
 8004c1c:	bfb8      	it	lt
 8004c1e:	9204      	strlt	r2, [sp, #16]
 8004c20:	7823      	ldrb	r3, [r4, #0]
 8004c22:	2b2e      	cmp	r3, #46	; 0x2e
 8004c24:	d10c      	bne.n	8004c40 <_svfiprintf_r+0x130>
 8004c26:	7863      	ldrb	r3, [r4, #1]
 8004c28:	2b2a      	cmp	r3, #42	; 0x2a
 8004c2a:	d134      	bne.n	8004c96 <_svfiprintf_r+0x186>
 8004c2c:	9b03      	ldr	r3, [sp, #12]
 8004c2e:	1d1a      	adds	r2, r3, #4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	9203      	str	r2, [sp, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bfb8      	it	lt
 8004c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c3c:	3402      	adds	r4, #2
 8004c3e:	9305      	str	r3, [sp, #20]
 8004c40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004d08 <_svfiprintf_r+0x1f8>
 8004c44:	7821      	ldrb	r1, [r4, #0]
 8004c46:	2203      	movs	r2, #3
 8004c48:	4650      	mov	r0, sl
 8004c4a:	f7fb fac1 	bl	80001d0 <memchr>
 8004c4e:	b138      	cbz	r0, 8004c60 <_svfiprintf_r+0x150>
 8004c50:	9b04      	ldr	r3, [sp, #16]
 8004c52:	eba0 000a 	sub.w	r0, r0, sl
 8004c56:	2240      	movs	r2, #64	; 0x40
 8004c58:	4082      	lsls	r2, r0
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	3401      	adds	r4, #1
 8004c5e:	9304      	str	r3, [sp, #16]
 8004c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c64:	4825      	ldr	r0, [pc, #148]	; (8004cfc <_svfiprintf_r+0x1ec>)
 8004c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c6a:	2206      	movs	r2, #6
 8004c6c:	f7fb fab0 	bl	80001d0 <memchr>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d038      	beq.n	8004ce6 <_svfiprintf_r+0x1d6>
 8004c74:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <_svfiprintf_r+0x1f0>)
 8004c76:	bb1b      	cbnz	r3, 8004cc0 <_svfiprintf_r+0x1b0>
 8004c78:	9b03      	ldr	r3, [sp, #12]
 8004c7a:	3307      	adds	r3, #7
 8004c7c:	f023 0307 	bic.w	r3, r3, #7
 8004c80:	3308      	adds	r3, #8
 8004c82:	9303      	str	r3, [sp, #12]
 8004c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c86:	4433      	add	r3, r6
 8004c88:	9309      	str	r3, [sp, #36]	; 0x24
 8004c8a:	e768      	b.n	8004b5e <_svfiprintf_r+0x4e>
 8004c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c90:	460c      	mov	r4, r1
 8004c92:	2001      	movs	r0, #1
 8004c94:	e7a6      	b.n	8004be4 <_svfiprintf_r+0xd4>
 8004c96:	2300      	movs	r3, #0
 8004c98:	3401      	adds	r4, #1
 8004c9a:	9305      	str	r3, [sp, #20]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f04f 0c0a 	mov.w	ip, #10
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ca8:	3a30      	subs	r2, #48	; 0x30
 8004caa:	2a09      	cmp	r2, #9
 8004cac:	d903      	bls.n	8004cb6 <_svfiprintf_r+0x1a6>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0c6      	beq.n	8004c40 <_svfiprintf_r+0x130>
 8004cb2:	9105      	str	r1, [sp, #20]
 8004cb4:	e7c4      	b.n	8004c40 <_svfiprintf_r+0x130>
 8004cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cba:	4604      	mov	r4, r0
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e7f0      	b.n	8004ca2 <_svfiprintf_r+0x192>
 8004cc0:	ab03      	add	r3, sp, #12
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	462a      	mov	r2, r5
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <_svfiprintf_r+0x1f4>)
 8004cc8:	a904      	add	r1, sp, #16
 8004cca:	4638      	mov	r0, r7
 8004ccc:	f3af 8000 	nop.w
 8004cd0:	1c42      	adds	r2, r0, #1
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	d1d6      	bne.n	8004c84 <_svfiprintf_r+0x174>
 8004cd6:	89ab      	ldrh	r3, [r5, #12]
 8004cd8:	065b      	lsls	r3, r3, #25
 8004cda:	f53f af2d 	bmi.w	8004b38 <_svfiprintf_r+0x28>
 8004cde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ce0:	b01d      	add	sp, #116	; 0x74
 8004ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce6:	ab03      	add	r3, sp, #12
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	462a      	mov	r2, r5
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <_svfiprintf_r+0x1f4>)
 8004cee:	a904      	add	r1, sp, #16
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	f000 f879 	bl	8004de8 <_printf_i>
 8004cf6:	e7eb      	b.n	8004cd0 <_svfiprintf_r+0x1c0>
 8004cf8:	08005178 	.word	0x08005178
 8004cfc:	08005182 	.word	0x08005182
 8004d00:	00000000 	.word	0x00000000
 8004d04:	08004a5d 	.word	0x08004a5d
 8004d08:	0800517e 	.word	0x0800517e

08004d0c <_printf_common>:
 8004d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	4616      	mov	r6, r2
 8004d12:	4699      	mov	r9, r3
 8004d14:	688a      	ldr	r2, [r1, #8]
 8004d16:	690b      	ldr	r3, [r1, #16]
 8004d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bfb8      	it	lt
 8004d20:	4613      	movlt	r3, r2
 8004d22:	6033      	str	r3, [r6, #0]
 8004d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d28:	4607      	mov	r7, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	b10a      	cbz	r2, 8004d32 <_printf_common+0x26>
 8004d2e:	3301      	adds	r3, #1
 8004d30:	6033      	str	r3, [r6, #0]
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	0699      	lsls	r1, r3, #26
 8004d36:	bf42      	ittt	mi
 8004d38:	6833      	ldrmi	r3, [r6, #0]
 8004d3a:	3302      	addmi	r3, #2
 8004d3c:	6033      	strmi	r3, [r6, #0]
 8004d3e:	6825      	ldr	r5, [r4, #0]
 8004d40:	f015 0506 	ands.w	r5, r5, #6
 8004d44:	d106      	bne.n	8004d54 <_printf_common+0x48>
 8004d46:	f104 0a19 	add.w	sl, r4, #25
 8004d4a:	68e3      	ldr	r3, [r4, #12]
 8004d4c:	6832      	ldr	r2, [r6, #0]
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	42ab      	cmp	r3, r5
 8004d52:	dc26      	bgt.n	8004da2 <_printf_common+0x96>
 8004d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d58:	1e13      	subs	r3, r2, #0
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	bf18      	it	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	0692      	lsls	r2, r2, #26
 8004d62:	d42b      	bmi.n	8004dbc <_printf_common+0xb0>
 8004d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d68:	4649      	mov	r1, r9
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	47c0      	blx	r8
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d01e      	beq.n	8004db0 <_printf_common+0xa4>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	6922      	ldr	r2, [r4, #16]
 8004d76:	f003 0306 	and.w	r3, r3, #6
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	bf02      	ittt	eq
 8004d7e:	68e5      	ldreq	r5, [r4, #12]
 8004d80:	6833      	ldreq	r3, [r6, #0]
 8004d82:	1aed      	subeq	r5, r5, r3
 8004d84:	68a3      	ldr	r3, [r4, #8]
 8004d86:	bf0c      	ite	eq
 8004d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d8c:	2500      	movne	r5, #0
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	bfc4      	itt	gt
 8004d92:	1a9b      	subgt	r3, r3, r2
 8004d94:	18ed      	addgt	r5, r5, r3
 8004d96:	2600      	movs	r6, #0
 8004d98:	341a      	adds	r4, #26
 8004d9a:	42b5      	cmp	r5, r6
 8004d9c:	d11a      	bne.n	8004dd4 <_printf_common+0xc8>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e008      	b.n	8004db4 <_printf_common+0xa8>
 8004da2:	2301      	movs	r3, #1
 8004da4:	4652      	mov	r2, sl
 8004da6:	4649      	mov	r1, r9
 8004da8:	4638      	mov	r0, r7
 8004daa:	47c0      	blx	r8
 8004dac:	3001      	adds	r0, #1
 8004dae:	d103      	bne.n	8004db8 <_printf_common+0xac>
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db8:	3501      	adds	r5, #1
 8004dba:	e7c6      	b.n	8004d4a <_printf_common+0x3e>
 8004dbc:	18e1      	adds	r1, r4, r3
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	2030      	movs	r0, #48	; 0x30
 8004dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dc6:	4422      	add	r2, r4
 8004dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	e7c7      	b.n	8004d64 <_printf_common+0x58>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4638      	mov	r0, r7
 8004ddc:	47c0      	blx	r8
 8004dde:	3001      	adds	r0, #1
 8004de0:	d0e6      	beq.n	8004db0 <_printf_common+0xa4>
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7d9      	b.n	8004d9a <_printf_common+0x8e>
	...

08004de8 <_printf_i>:
 8004de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dec:	7e0f      	ldrb	r7, [r1, #24]
 8004dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004df0:	2f78      	cmp	r7, #120	; 0x78
 8004df2:	4691      	mov	r9, r2
 8004df4:	4680      	mov	r8, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	469a      	mov	sl, r3
 8004dfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dfe:	d807      	bhi.n	8004e10 <_printf_i+0x28>
 8004e00:	2f62      	cmp	r7, #98	; 0x62
 8004e02:	d80a      	bhi.n	8004e1a <_printf_i+0x32>
 8004e04:	2f00      	cmp	r7, #0
 8004e06:	f000 80d4 	beq.w	8004fb2 <_printf_i+0x1ca>
 8004e0a:	2f58      	cmp	r7, #88	; 0x58
 8004e0c:	f000 80c0 	beq.w	8004f90 <_printf_i+0x1a8>
 8004e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e18:	e03a      	b.n	8004e90 <_printf_i+0xa8>
 8004e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e1e:	2b15      	cmp	r3, #21
 8004e20:	d8f6      	bhi.n	8004e10 <_printf_i+0x28>
 8004e22:	a101      	add	r1, pc, #4	; (adr r1, 8004e28 <_printf_i+0x40>)
 8004e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e28:	08004e81 	.word	0x08004e81
 8004e2c:	08004e95 	.word	0x08004e95
 8004e30:	08004e11 	.word	0x08004e11
 8004e34:	08004e11 	.word	0x08004e11
 8004e38:	08004e11 	.word	0x08004e11
 8004e3c:	08004e11 	.word	0x08004e11
 8004e40:	08004e95 	.word	0x08004e95
 8004e44:	08004e11 	.word	0x08004e11
 8004e48:	08004e11 	.word	0x08004e11
 8004e4c:	08004e11 	.word	0x08004e11
 8004e50:	08004e11 	.word	0x08004e11
 8004e54:	08004f99 	.word	0x08004f99
 8004e58:	08004ec1 	.word	0x08004ec1
 8004e5c:	08004f53 	.word	0x08004f53
 8004e60:	08004e11 	.word	0x08004e11
 8004e64:	08004e11 	.word	0x08004e11
 8004e68:	08004fbb 	.word	0x08004fbb
 8004e6c:	08004e11 	.word	0x08004e11
 8004e70:	08004ec1 	.word	0x08004ec1
 8004e74:	08004e11 	.word	0x08004e11
 8004e78:	08004e11 	.word	0x08004e11
 8004e7c:	08004f5b 	.word	0x08004f5b
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	1d1a      	adds	r2, r3, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	602a      	str	r2, [r5, #0]
 8004e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e90:	2301      	movs	r3, #1
 8004e92:	e09f      	b.n	8004fd4 <_printf_i+0x1ec>
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	0607      	lsls	r7, r0, #24
 8004e9a:	f103 0104 	add.w	r1, r3, #4
 8004e9e:	6029      	str	r1, [r5, #0]
 8004ea0:	d501      	bpl.n	8004ea6 <_printf_i+0xbe>
 8004ea2:	681e      	ldr	r6, [r3, #0]
 8004ea4:	e003      	b.n	8004eae <_printf_i+0xc6>
 8004ea6:	0646      	lsls	r6, r0, #25
 8004ea8:	d5fb      	bpl.n	8004ea2 <_printf_i+0xba>
 8004eaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004eae:	2e00      	cmp	r6, #0
 8004eb0:	da03      	bge.n	8004eba <_printf_i+0xd2>
 8004eb2:	232d      	movs	r3, #45	; 0x2d
 8004eb4:	4276      	negs	r6, r6
 8004eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eba:	485a      	ldr	r0, [pc, #360]	; (8005024 <_printf_i+0x23c>)
 8004ebc:	230a      	movs	r3, #10
 8004ebe:	e012      	b.n	8004ee6 <_printf_i+0xfe>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	6820      	ldr	r0, [r4, #0]
 8004ec4:	1d19      	adds	r1, r3, #4
 8004ec6:	6029      	str	r1, [r5, #0]
 8004ec8:	0605      	lsls	r5, r0, #24
 8004eca:	d501      	bpl.n	8004ed0 <_printf_i+0xe8>
 8004ecc:	681e      	ldr	r6, [r3, #0]
 8004ece:	e002      	b.n	8004ed6 <_printf_i+0xee>
 8004ed0:	0641      	lsls	r1, r0, #25
 8004ed2:	d5fb      	bpl.n	8004ecc <_printf_i+0xe4>
 8004ed4:	881e      	ldrh	r6, [r3, #0]
 8004ed6:	4853      	ldr	r0, [pc, #332]	; (8005024 <_printf_i+0x23c>)
 8004ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8004eda:	bf0c      	ite	eq
 8004edc:	2308      	moveq	r3, #8
 8004ede:	230a      	movne	r3, #10
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ee6:	6865      	ldr	r5, [r4, #4]
 8004ee8:	60a5      	str	r5, [r4, #8]
 8004eea:	2d00      	cmp	r5, #0
 8004eec:	bfa2      	ittt	ge
 8004eee:	6821      	ldrge	r1, [r4, #0]
 8004ef0:	f021 0104 	bicge.w	r1, r1, #4
 8004ef4:	6021      	strge	r1, [r4, #0]
 8004ef6:	b90e      	cbnz	r6, 8004efc <_printf_i+0x114>
 8004ef8:	2d00      	cmp	r5, #0
 8004efa:	d04b      	beq.n	8004f94 <_printf_i+0x1ac>
 8004efc:	4615      	mov	r5, r2
 8004efe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f02:	fb03 6711 	mls	r7, r3, r1, r6
 8004f06:	5dc7      	ldrb	r7, [r0, r7]
 8004f08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f0c:	4637      	mov	r7, r6
 8004f0e:	42bb      	cmp	r3, r7
 8004f10:	460e      	mov	r6, r1
 8004f12:	d9f4      	bls.n	8004efe <_printf_i+0x116>
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d10b      	bne.n	8004f30 <_printf_i+0x148>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	07de      	lsls	r6, r3, #31
 8004f1c:	d508      	bpl.n	8004f30 <_printf_i+0x148>
 8004f1e:	6923      	ldr	r3, [r4, #16]
 8004f20:	6861      	ldr	r1, [r4, #4]
 8004f22:	4299      	cmp	r1, r3
 8004f24:	bfde      	ittt	le
 8004f26:	2330      	movle	r3, #48	; 0x30
 8004f28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f30:	1b52      	subs	r2, r2, r5
 8004f32:	6122      	str	r2, [r4, #16]
 8004f34:	f8cd a000 	str.w	sl, [sp]
 8004f38:	464b      	mov	r3, r9
 8004f3a:	aa03      	add	r2, sp, #12
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4640      	mov	r0, r8
 8004f40:	f7ff fee4 	bl	8004d0c <_printf_common>
 8004f44:	3001      	adds	r0, #1
 8004f46:	d14a      	bne.n	8004fde <_printf_i+0x1f6>
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	b004      	add	sp, #16
 8004f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	f043 0320 	orr.w	r3, r3, #32
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	4833      	ldr	r0, [pc, #204]	; (8005028 <_printf_i+0x240>)
 8004f5c:	2778      	movs	r7, #120	; 0x78
 8004f5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	6829      	ldr	r1, [r5, #0]
 8004f66:	061f      	lsls	r7, r3, #24
 8004f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f6c:	d402      	bmi.n	8004f74 <_printf_i+0x18c>
 8004f6e:	065f      	lsls	r7, r3, #25
 8004f70:	bf48      	it	mi
 8004f72:	b2b6      	uxthmi	r6, r6
 8004f74:	07df      	lsls	r7, r3, #31
 8004f76:	bf48      	it	mi
 8004f78:	f043 0320 	orrmi.w	r3, r3, #32
 8004f7c:	6029      	str	r1, [r5, #0]
 8004f7e:	bf48      	it	mi
 8004f80:	6023      	strmi	r3, [r4, #0]
 8004f82:	b91e      	cbnz	r6, 8004f8c <_printf_i+0x1a4>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	f023 0320 	bic.w	r3, r3, #32
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	e7a7      	b.n	8004ee0 <_printf_i+0xf8>
 8004f90:	4824      	ldr	r0, [pc, #144]	; (8005024 <_printf_i+0x23c>)
 8004f92:	e7e4      	b.n	8004f5e <_printf_i+0x176>
 8004f94:	4615      	mov	r5, r2
 8004f96:	e7bd      	b.n	8004f14 <_printf_i+0x12c>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	6826      	ldr	r6, [r4, #0]
 8004f9c:	6961      	ldr	r1, [r4, #20]
 8004f9e:	1d18      	adds	r0, r3, #4
 8004fa0:	6028      	str	r0, [r5, #0]
 8004fa2:	0635      	lsls	r5, r6, #24
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	d501      	bpl.n	8004fac <_printf_i+0x1c4>
 8004fa8:	6019      	str	r1, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <_printf_i+0x1ca>
 8004fac:	0670      	lsls	r0, r6, #25
 8004fae:	d5fb      	bpl.n	8004fa8 <_printf_i+0x1c0>
 8004fb0:	8019      	strh	r1, [r3, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6123      	str	r3, [r4, #16]
 8004fb6:	4615      	mov	r5, r2
 8004fb8:	e7bc      	b.n	8004f34 <_printf_i+0x14c>
 8004fba:	682b      	ldr	r3, [r5, #0]
 8004fbc:	1d1a      	adds	r2, r3, #4
 8004fbe:	602a      	str	r2, [r5, #0]
 8004fc0:	681d      	ldr	r5, [r3, #0]
 8004fc2:	6862      	ldr	r2, [r4, #4]
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f7fb f902 	bl	80001d0 <memchr>
 8004fcc:	b108      	cbz	r0, 8004fd2 <_printf_i+0x1ea>
 8004fce:	1b40      	subs	r0, r0, r5
 8004fd0:	6060      	str	r0, [r4, #4]
 8004fd2:	6863      	ldr	r3, [r4, #4]
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fdc:	e7aa      	b.n	8004f34 <_printf_i+0x14c>
 8004fde:	6923      	ldr	r3, [r4, #16]
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	47d0      	blx	sl
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d0ad      	beq.n	8004f48 <_printf_i+0x160>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	079b      	lsls	r3, r3, #30
 8004ff0:	d413      	bmi.n	800501a <_printf_i+0x232>
 8004ff2:	68e0      	ldr	r0, [r4, #12]
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	4298      	cmp	r0, r3
 8004ff8:	bfb8      	it	lt
 8004ffa:	4618      	movlt	r0, r3
 8004ffc:	e7a6      	b.n	8004f4c <_printf_i+0x164>
 8004ffe:	2301      	movs	r3, #1
 8005000:	4632      	mov	r2, r6
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	47d0      	blx	sl
 8005008:	3001      	adds	r0, #1
 800500a:	d09d      	beq.n	8004f48 <_printf_i+0x160>
 800500c:	3501      	adds	r5, #1
 800500e:	68e3      	ldr	r3, [r4, #12]
 8005010:	9903      	ldr	r1, [sp, #12]
 8005012:	1a5b      	subs	r3, r3, r1
 8005014:	42ab      	cmp	r3, r5
 8005016:	dcf2      	bgt.n	8004ffe <_printf_i+0x216>
 8005018:	e7eb      	b.n	8004ff2 <_printf_i+0x20a>
 800501a:	2500      	movs	r5, #0
 800501c:	f104 0619 	add.w	r6, r4, #25
 8005020:	e7f5      	b.n	800500e <_printf_i+0x226>
 8005022:	bf00      	nop
 8005024:	08005189 	.word	0x08005189
 8005028:	0800519a 	.word	0x0800519a

0800502c <memmove>:
 800502c:	4288      	cmp	r0, r1
 800502e:	b510      	push	{r4, lr}
 8005030:	eb01 0402 	add.w	r4, r1, r2
 8005034:	d902      	bls.n	800503c <memmove+0x10>
 8005036:	4284      	cmp	r4, r0
 8005038:	4623      	mov	r3, r4
 800503a:	d807      	bhi.n	800504c <memmove+0x20>
 800503c:	1e43      	subs	r3, r0, #1
 800503e:	42a1      	cmp	r1, r4
 8005040:	d008      	beq.n	8005054 <memmove+0x28>
 8005042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800504a:	e7f8      	b.n	800503e <memmove+0x12>
 800504c:	4402      	add	r2, r0
 800504e:	4601      	mov	r1, r0
 8005050:	428a      	cmp	r2, r1
 8005052:	d100      	bne.n	8005056 <memmove+0x2a>
 8005054:	bd10      	pop	{r4, pc}
 8005056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800505a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800505e:	e7f7      	b.n	8005050 <memmove+0x24>

08005060 <_sbrk_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4d06      	ldr	r5, [pc, #24]	; (800507c <_sbrk_r+0x1c>)
 8005064:	2300      	movs	r3, #0
 8005066:	4604      	mov	r4, r0
 8005068:	4608      	mov	r0, r1
 800506a:	602b      	str	r3, [r5, #0]
 800506c:	f7fb fde6 	bl	8000c3c <_sbrk>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_sbrk_r+0x1a>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	b103      	cbz	r3, 800507a <_sbrk_r+0x1a>
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	200002ec 	.word	0x200002ec

08005080 <memcpy>:
 8005080:	440a      	add	r2, r1
 8005082:	4291      	cmp	r1, r2
 8005084:	f100 33ff 	add.w	r3, r0, #4294967295
 8005088:	d100      	bne.n	800508c <memcpy+0xc>
 800508a:	4770      	bx	lr
 800508c:	b510      	push	{r4, lr}
 800508e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005096:	4291      	cmp	r1, r2
 8005098:	d1f9      	bne.n	800508e <memcpy+0xe>
 800509a:	bd10      	pop	{r4, pc}

0800509c <_realloc_r>:
 800509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a0:	4680      	mov	r8, r0
 80050a2:	4614      	mov	r4, r2
 80050a4:	460e      	mov	r6, r1
 80050a6:	b921      	cbnz	r1, 80050b2 <_realloc_r+0x16>
 80050a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ac:	4611      	mov	r1, r2
 80050ae:	f7ff bc49 	b.w	8004944 <_malloc_r>
 80050b2:	b92a      	cbnz	r2, 80050c0 <_realloc_r+0x24>
 80050b4:	f7ff fbda 	bl	800486c <_free_r>
 80050b8:	4625      	mov	r5, r4
 80050ba:	4628      	mov	r0, r5
 80050bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c0:	f000 f81b 	bl	80050fa <_malloc_usable_size_r>
 80050c4:	4284      	cmp	r4, r0
 80050c6:	4607      	mov	r7, r0
 80050c8:	d802      	bhi.n	80050d0 <_realloc_r+0x34>
 80050ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050ce:	d812      	bhi.n	80050f6 <_realloc_r+0x5a>
 80050d0:	4621      	mov	r1, r4
 80050d2:	4640      	mov	r0, r8
 80050d4:	f7ff fc36 	bl	8004944 <_malloc_r>
 80050d8:	4605      	mov	r5, r0
 80050da:	2800      	cmp	r0, #0
 80050dc:	d0ed      	beq.n	80050ba <_realloc_r+0x1e>
 80050de:	42bc      	cmp	r4, r7
 80050e0:	4622      	mov	r2, r4
 80050e2:	4631      	mov	r1, r6
 80050e4:	bf28      	it	cs
 80050e6:	463a      	movcs	r2, r7
 80050e8:	f7ff ffca 	bl	8005080 <memcpy>
 80050ec:	4631      	mov	r1, r6
 80050ee:	4640      	mov	r0, r8
 80050f0:	f7ff fbbc 	bl	800486c <_free_r>
 80050f4:	e7e1      	b.n	80050ba <_realloc_r+0x1e>
 80050f6:	4635      	mov	r5, r6
 80050f8:	e7df      	b.n	80050ba <_realloc_r+0x1e>

080050fa <_malloc_usable_size_r>:
 80050fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050fe:	1f18      	subs	r0, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	bfbc      	itt	lt
 8005104:	580b      	ldrlt	r3, [r1, r0]
 8005106:	18c0      	addlt	r0, r0, r3
 8005108:	4770      	bx	lr
	...

0800510c <_init>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr

08005118 <_fini>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr
